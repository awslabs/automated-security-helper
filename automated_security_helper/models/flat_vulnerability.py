# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

"""Module for flattened vulnerability representation."""

from typing import Optional

from pydantic import BaseModel, ConfigDict, Field


class FlatVulnerability(BaseModel):
    """A flattened representation of a vulnerability for easy export to tabular formats."""

    model_config = ConfigDict(
        str_strip_whitespace=True,
        arbitrary_types_allowed=True,
    )

    # Core vulnerability information
    id: str = Field(description="Unique identifier for the vulnerability")
    title: str = Field(description="Title or name of the vulnerability")
    description: str = Field(description="Description of the vulnerability")
    severity: str = Field(
        description="Severity level (CRITICAL, HIGH, MEDIUM, LOW, INFO)"
    )

    # Source information
    scanner: str = Field(description="Scanner that detected the vulnerability")
    scanner_type: str = Field(description="Type of scanner (SAST, DAST, SCA, etc.)")
    rule_id: Optional[str] = Field(
        None, description="ID of the rule that triggered the finding"
    )

    # Location information
    file_path: Optional[str] = Field(
        None, description="Path to the file containing the vulnerability"
    )
    line_start: Optional[int] = Field(None, description="Starting line number")
    line_end: Optional[int] = Field(None, description="Ending line number")

    # Additional metadata
    cve_id: Optional[str] = Field(None, description="CVE ID if applicable")
    cwe_id: Optional[str] = Field(None, description="CWE ID if applicable")
    fix_available: Optional[bool] = Field(
        None, description="Whether a fix is available"
    )
    detected_at: Optional[str] = Field(
        None, description="When the vulnerability was detected"
    )

    # Complex data stored as JSON strings
    tags: Optional[str] = Field(
        None, description="JSON string of tags associated with the vulnerability"
    )
    properties: Optional[str] = Field(
        None, description="JSON string of additional properties"
    )
    references: Optional[str] = Field(None, description="JSON string of references")

    # Raw data
    raw_data: Optional[str] = Field(
        None, description="JSON string of the raw vulnerability data"
    )

# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

# generated by datamodel-codegen:
#   filename:  vulnerability_finding.json
#   timestamp: 2025-04-14T20:23:33+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import ConfigDict, BaseModel, Field


class ActivityId(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class SeverityId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class StatusId(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class TypeId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_12 = 12
    integer_13 = 13


class InstallStateId(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class TypeId1(int, Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class TypeId2(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9


class TypeId3(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11


class Analytic(BaseModel):
    model_config = ConfigDict(extra="forbid", use_enum_values=True)

    category: Optional[str] = Field(None, title="Category")
    desc: Optional[str] = Field(None, title="Description")
    name: Optional[str] = Field(None, title="Name")
    related_analytics: Optional[List[Analytic]] = Field(None, title="Related Analytics")
    type: Optional[str] = Field(None, title="Type")
    type_id: TypeId3 = Field(..., title="Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")
    version: Optional[str] = Field(None, title="Version")


class FactorTypeId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11


class AutonomousSystem(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: Optional[str] = Field(None, title="Name")
    number: Optional[int] = Field(None, title="Number")


class ClassifierDetails(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: Optional[str] = Field(None, title="Name")
    type: str = Field(..., title="Type")
    uid: Optional[str] = Field(None, title="Unique ID")


class Depth(str, Enum):
    Base = "Base"
    Environmental = "Environmental"
    Temporal = "Temporal"


class Cwe(BaseModel):
    model_config = ConfigDict(extra="forbid")

    caption: Optional[str] = Field(None, title="Caption")
    src_url: Optional[str] = Field(None, title="Source URL")
    uid: str = Field(..., title="CWE ID")


class CategoryId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class ConfidentialityId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class StatusId1(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class RiskLevelId(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4


class TypeId4(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_14 = 14
    integer_15 = 15
    integer_12 = 12
    integer_13 = 13


class CpuArchitectureId(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class AlgorithmId(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4


class StateId(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class Display(BaseModel):
    model_config = ConfigDict(extra="forbid")

    color_depth: Optional[int] = Field(None, title="Color Depth")
    physical_height: Optional[int] = Field(None, title="Physical Height")
    physical_orientation: Optional[int] = Field(None, title="Physical Orientation")
    physical_width: Optional[int] = Field(None, title="Physical Width")
    scale_factor: Optional[int] = Field(None, title="Scale Factor")


class FlagId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class DnsAnswer(BaseModel):
    model_config = ConfigDict(extra="forbid")

    class_: Optional[str] = Field(None, alias="class", title="Resource Record Class")
    flag_ids: Optional[List[FlagId]] = Field(None, title="DNS Header Flags")
    flags: Optional[List[str]] = Field(None, title="DNS Header Flags")
    packet_uid: Optional[int] = Field(None, title="Packet UID")
    rdata: str = Field(..., title="DNS RData")
    ttl: Optional[int] = Field(None, title="TTL")
    type: Optional[str] = Field(None, title="Resource Record Type")


class TypeId5(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class EmailAuth(BaseModel):
    model_config = ConfigDict(extra="forbid")

    dkim: Optional[str] = Field(None, title="DKIM Status")
    dkim_domain: Optional[str] = Field(None, title="DKIM Domain")
    dkim_signature: Optional[str] = Field(None, title="DKIM Signature")
    dmarc: Optional[str] = Field(None, title="DMARC Status")
    dmarc_override: Optional[str] = Field(None, title="DMARC Override")
    dmarc_policy: Optional[str] = Field(None, title="DMARC Policy")
    spf: Optional[str] = Field(None, title="SPF Status")


class AlgorithmId1(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class EncryptionDetails(BaseModel):
    model_config = ConfigDict(extra="forbid")

    algorithm: Optional[str] = Field(None, title="Encryption Algorithm")
    algorithm_id: Optional[AlgorithmId1] = Field(None, title="Encryption Algorithm ID")
    key_length: Optional[int] = Field(None, title="Encryption Key Length")
    key_uid: Optional[str] = Field(None, title="Key UID")
    type: Optional[str] = Field(None, title="Encryption Type")


class EnvironmentVariable(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: str = Field(..., title="Name")
    value: str = Field(..., title="Value")


class Epss(BaseModel):
    model_config = ConfigDict(extra="forbid")

    created_time: Optional[int] = Field(None, title="Created Time")
    percentile: Optional[float] = Field(None, title="EPSS Percentile")
    score: str = Field(..., title="EPPS Score")
    version: Optional[str] = Field(None, title="Version")


class Extension(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: str = Field(..., title="Name")
    uid: str = Field(..., title="Unique ID")
    version: str = Field(..., title="Version")


class Feature(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: Optional[str] = Field(None, title="Name")
    uid: Optional[str] = Field(None, title="Unique ID")
    version: Optional[str] = Field(None, title="Version")


class DriveTypeId(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class TypeId6(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7


class AlgorithmId2(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7


class Fingerprint(BaseModel):
    model_config = ConfigDict(extra="forbid")

    algorithm: Optional[str] = Field(None, title="Algorithm")
    algorithm_id: AlgorithmId2 = Field(..., title="Algorithm ID")
    value: str = Field(..., title="Value")


class FirewallRule(BaseModel):
    model_config = ConfigDict(extra="forbid")

    category: Optional[str] = Field(None, title="Category")
    condition: Optional[str] = Field(None, title="Condition")
    desc: Optional[str] = Field(None, title="Description")
    duration: Optional[int] = Field(None, title="Duration Milliseconds")
    match_details: Optional[List[str]] = Field(None, title="Match Details")
    match_location: Optional[str] = Field(None, title="Match Location")
    name: Optional[str] = Field(None, title="Name")
    rate_limit: Optional[int] = Field(None, title="Rate Limit")
    sensitivity: Optional[str] = Field(None, title="Sensitivity")
    type: Optional[str] = Field(None, title="Type")
    uid: Optional[str] = Field(None, title="Unique ID")
    version: Optional[str] = Field(None, title="Version")


class Group(BaseModel):
    model_config = ConfigDict(extra="forbid")

    desc: Optional[str] = Field(None, title="Description")
    domain: Optional[str] = Field(None, title="Domain")
    name: Optional[str] = Field(None, title="Name")
    privileges: Optional[List[str]] = Field(None, title="Privileges")
    type: Optional[str] = Field(None, title="Account Type")
    uid: Optional[str] = Field(None, title="Unique ID")


class HttpHeader(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: str = Field(..., title="Name")
    value: str = Field(..., title="Value")


class StateId1(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4


class KeyValueObject(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: str = Field(..., title="Name")
    value: Optional[str] = Field(None, title="Value")
    values: Optional[List[str]] = Field(None, title="Values")


class KeyboardInfo(BaseModel):
    model_config = ConfigDict(extra="forbid")

    function_keys: Optional[int] = Field(None, title="Function Keys")
    ime: Optional[str] = Field(None, title="IME")
    keyboard_layout: Optional[str] = Field(None, title="Keyboard Layout")
    keyboard_subtype: Optional[int] = Field(None, title="Keyboard Subtype")
    keyboard_type: Optional[str] = Field(None, title="Keyboard Type")


class PhaseId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7


class KillChainPhase(BaseModel):
    model_config = ConfigDict(extra="forbid")

    phase: Optional[str] = Field(None, title="Kill Chain Phase")
    phase_id: PhaseId = Field(..., title="Kill Chain Phase ID")


class Location(BaseModel):
    model_config = ConfigDict(extra="forbid")

    aerial_height: Optional[str] = Field(None, title="Aerial Height")
    city: Optional[str] = Field(None, title="City")
    continent: Optional[str] = Field(None, title="Continent")
    coordinates: Optional[List[float]] = Field(None, title="Coordinates")
    country: Optional[str] = Field(None, title="Country")
    desc: Optional[str] = Field(None, title="Description")
    geodetic_altitude: Optional[str] = Field(None, title="Geodetic Altitude")
    geodetic_vertical_accuracy: Optional[str] = Field(
        None, title="Geodetic Vertical Accuracy"
    )
    geohash: Optional[str] = Field(None, title="Geohash")
    horizontal_accuracy: Optional[str] = Field(None, title="Horizontal Accuracy")
    is_on_premises: Optional[bool] = Field(None, title="On Premises")
    isp: Optional[str] = Field(None, title="ISP")
    lat: Optional[float] = Field(None, title="Latitude")
    long: Optional[float] = Field(None, title="Longitude")
    postal_code: Optional[str] = Field(None, title="Postal Code")
    pressure_altitude: Optional[str] = Field(None, title="Pressure Altitude")
    provider: Optional[str] = Field(None, title="Provider")
    region: Optional[str] = Field(None, title="Region")


class LongString(BaseModel):
    model_config = ConfigDict(extra="forbid")

    is_truncated: Optional[bool] = Field(None, title="Is Truncated")
    untruncated_size: Optional[int] = Field(None, title="Untruncated Size")
    value: str = Field(..., title="Value")


class ClassificationId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_14 = 14
    integer_15 = 15
    integer_16 = 16
    integer_17 = 17
    integer_18 = 18
    integer_20 = 20
    integer_21 = 21
    integer_22 = 22
    integer_13 = 13
    integer_19 = 19


class Metric(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: str = Field(..., title="Name")
    value: str = Field(..., title="Value")


class TypeId7(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4


class NetworkInterface(BaseModel):
    model_config = ConfigDict(extra="forbid")

    hostname: Optional[str] = Field(None, title="Hostname")
    ip: Optional[str] = Field(None, title="IP Address")
    mac: Optional[str] = Field(None, title="MAC Address")
    name: Optional[str] = Field(None, title="Name")
    namespace: Optional[str] = Field(None, title="Namespace")
    subnet_prefix: Optional[int] = Field(None, title="Subnet Prefix Length")
    type: Optional[str] = Field(None, title="Type")
    type_id: TypeId7 = Field(..., title="Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")


class Object(BaseModel):
    pass
    model_config = ConfigDict(extra="allow")


class TypeId8(int, Enum):
    integer_14 = 14
    integer_22 = 22
    integer_12 = 12
    integer_26 = 26
    integer_8 = 8
    integer_2 = 2
    integer_21 = 21
    integer_28 = 28
    integer_25 = 25
    integer_37 = 37
    integer_11 = 11
    integer_27 = 27
    integer_6 = 6
    integer_99 = 99
    integer_19 = 19
    integer_13 = 13
    integer_5 = 5
    integer_24 = 24
    integer_4 = 4
    integer_32 = 32
    integer_1 = 1
    integer_9 = 9
    integer_20 = 20
    integer_30 = 30
    integer_0 = 0
    integer_7 = 7
    integer_15 = 15
    integer_36 = 36
    integer_29 = 29
    integer_3 = 3
    integer_38 = 38
    integer_18 = 18
    integer_34 = 34
    integer_17 = 17
    integer_35 = 35
    integer_10 = 10
    integer_16 = 16
    integer_33 = 33
    integer_23 = 23
    integer_31 = 31


class OccurrenceDetails(BaseModel):
    model_config = ConfigDict(extra="forbid")

    cell_name: Optional[str] = Field(None, title="Cell Name")
    column_name: Optional[str] = Field(None, title="Column Name")
    column_number: Optional[int] = Field(None, title="Column Number")
    end_line: Optional[int] = Field(None, title="End Line")
    json_path: Optional[str] = Field(None, title="JSON Path")
    page_number: Optional[int] = Field(None, title="Page Number")
    record_index_in_array: Optional[int] = Field(None, title="Record Index in Array")
    row_number: Optional[int] = Field(None, title="Row Number")
    start_line: Optional[int] = Field(None, title="Start Line")


class Organization(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: Optional[str] = Field(None, title="Name")
    ou_name: Optional[str] = Field(None, title="Org Unit Name")
    ou_uid: Optional[str] = Field(None, title="Org Unit ID")
    uid: Optional[str] = Field(None, title="Unique ID")


class TypeId9(int, Enum):
    integer_0 = 0
    integer_99 = 99
    integer_101 = 101
    integer_100 = 100
    integer_200 = 200
    integer_201 = 201
    integer_300 = 300
    integer_301 = 301
    integer_302 = 302
    integer_400 = 400
    integer_401 = 401
    integer_402 = 402


class Os(BaseModel):
    model_config = ConfigDict(extra="forbid")

    build: Optional[str] = Field(None, title="OS Build")
    country: Optional[str] = Field(None, title="Country")
    cpe_name: Optional[str] = Field(None, title="The product CPE identifier")
    cpu_bits: Optional[int] = Field(None, title="CPU Bits")
    edition: Optional[str] = Field(None, title="OS Edition")
    kernel_release: Optional[str] = Field(None, title="Kernel Release")
    lang: Optional[str] = Field(None, title="Language")
    name: str = Field(..., title="Name")
    sp_name: Optional[str] = Field(None, title="OS Service Pack")
    sp_ver: Optional[int] = Field(None, title="OS Service Pack Version")
    type: Optional[str] = Field(None, title="Type")
    type_id: TypeId9 = Field(..., title="Type ID")
    version: Optional[str] = Field(None, title="Version")


class ConfidenceId(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class Tlp(str, Enum):
    AMBER = "AMBER"
    AMBER_STRICT = "AMBER STRICT"
    CLEAR = "CLEAR"
    GREEN = "GREEN"
    RED = "RED"
    WHITE = "WHITE"


class TypeId10(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11
    integer_14 = 14
    integer_12 = 12
    integer_13 = 13


class TypeId11(int, Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class Package(BaseModel):
    model_config = ConfigDict(extra="forbid")

    architecture: Optional[str] = Field(None, title="Architecture")
    cpe_name: Optional[str] = Field(None, title="The product CPE identifier")
    epoch: Optional[int] = Field(None, title="Epoch")
    hash: Optional[Fingerprint] = Field(None, title="Hash")
    license: Optional[str] = Field(None, title="Software License")
    name: str = Field(..., title="Name")
    purl: Optional[str] = Field(None, title="Package URL")
    release: Optional[str] = Field(None, title="Software Release Details")
    type: Optional[str] = Field(None, title="Type")
    type_id: Optional[TypeId11] = Field(None, title="Type ID")
    vendor_name: Optional[str] = Field(None, title="Vendor Name")
    version: str = Field(..., title="Version")


class Policy(BaseModel):
    model_config = ConfigDict(extra="forbid")

    desc: Optional[str] = Field(None, title="Description")
    group: Optional[Group] = Field(None, title="Group")
    is_applied: Optional[bool] = Field(None, title="Applied")
    name: Optional[str] = Field(None, title="Name")
    uid: Optional[str] = Field(None, title="Unique ID")
    version: Optional[str] = Field(None, title="Version")


class IntegrityId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5


class ProcessEntity(BaseModel):
    model_config = ConfigDict(extra="forbid")

    cmd_line: Optional[str] = Field(None, title="Command Line")
    created_time: Optional[int] = Field(None, title="Created Time")
    name: Optional[str] = Field(None, title="Name")
    path: Optional[str] = Field(None, title="Path")
    pid: Optional[int] = Field(None, title="Process ID")
    uid: Optional[str] = Field(None, title="Unique ID")


class Product(BaseModel):
    model_config = ConfigDict(extra="forbid")

    cpe_name: Optional[str] = Field(None, title="The product CPE identifier")
    feature: Optional[Feature] = Field(None, title="Feature")
    lang: Optional[str] = Field(None, title="Language")
    name: Optional[str] = Field(None, title="Name")
    path: Optional[str] = Field(None, title="Path")
    uid: Optional[str] = Field(None, title="Unique ID")
    url_string: Optional[str] = Field(None, title="URL String")
    vendor_name: Optional[str] = Field(None, title="Vendor Name")
    version: Optional[str] = Field(None, title="Version")


class ScoreId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10


class Reputation(BaseModel):
    model_config = ConfigDict(extra="forbid")

    base_score: float = Field(..., title="Reputation Score")
    provider: Optional[str] = Field(None, title="Provider")
    score: Optional[str] = Field(None, title="Reputation Score")
    score_id: ScoreId = Field(..., title="Reputation Score ID")


class San(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: str = Field(..., title="Name")
    type: str = Field(..., title="Type")


class AuthProtocolId(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8
    integer_9 = 9
    integer_10 = 10
    integer_11 = 11


class Scim(BaseModel):
    model_config = ConfigDict(extra="forbid")

    auth_protocol: Optional[str] = Field(None, title="Auth Protocol")
    auth_protocol_id: Optional[AuthProtocolId] = Field(None, title="Auth Protocol ID")
    created_time: Optional[int] = Field(None, title="Created Time")
    error_message: Optional[str] = Field(None, title="Last Error Message")
    is_group_provisioning_enabled: Optional[bool] = Field(
        None, title="SCIM Group Provisioning Enabled"
    )
    is_user_provisioning_enabled: Optional[bool] = Field(
        None, title="SCIM User Provisioning Enabled"
    )
    last_run_time: Optional[int] = Field(None, title="Last Sync Time")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    name: Optional[str] = Field(None, title="Name")
    protocol_name: Optional[str] = Field(None, title="Supported Protocol")
    rate_limit: Optional[int] = Field(None, title="Rate Limit")
    scim_group_schema: Optional[Any] = Field(None, title="SCIM Group Schema")
    scim_user_schema: Optional[Any] = Field(None, title="SCIM User Schema")
    state: Optional[str] = Field(None, title="State")
    state_id: Optional[StateId1] = Field(None, title="State ID")
    uid: Optional[str] = Field(None, title="Unique ID")
    uid_alt: Optional[str] = Field(None, title="External ID")
    url_string: Optional[str] = Field(None, title="SCIM Endpoint URL")
    vendor_name: Optional[str] = Field(None, title="Service Provider")
    version: Optional[str] = Field(None, title="SCIM Version")


class TypeId12(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7


class Service(BaseModel):
    model_config = ConfigDict(extra="forbid")

    labels: Optional[List[str]] = Field(None, title="Labels")
    name: Optional[str] = Field(None, title="Name")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")
    uid: Optional[str] = Field(None, title="Unique ID")
    version: Optional[str] = Field(None, title="Version")


class Session(BaseModel):
    model_config = ConfigDict(extra="forbid")

    count: Optional[int] = Field(None, title="Count")
    created_time: Optional[int] = Field(None, title="Created Time")
    credential_uid: Optional[str] = Field(None, title="User Credential ID")
    expiration_reason: Optional[str] = Field(None, title="Expiration Reason")
    expiration_time: Optional[int] = Field(None, title="Expiration Time")
    is_mfa: Optional[bool] = Field(None, title="Multi Factor Authentication")
    is_remote: Optional[bool] = Field(None, title="Remote")
    is_vpn: Optional[bool] = Field(None, title="VPN Session")
    issuer: Optional[str] = Field(None, title="Issuer Details")
    terminal: Optional[str] = Field(None, title="Terminal")
    uid: Optional[str] = Field(None, title="Unique ID")
    uid_alt: Optional[str] = Field(None, title="Alternate ID")
    uuid: Optional[str] = Field(None, title="UUID")


class SubTechnique(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: Optional[str] = Field(None, title="Name")
    src_url: Optional[str] = Field(None, title="Source URL")
    uid: Optional[str] = Field(None, title="Unique ID")


class Tactic(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: Optional[str] = Field(None, title="Name")
    src_url: Optional[str] = Field(None, title="Source URL")
    uid: Optional[str] = Field(None, title="Unique ID")


class Technique(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: Optional[str] = Field(None, title="Name")
    src_url: Optional[str] = Field(None, title="Source URL")
    uid: Optional[str] = Field(None, title="Unique ID")


class TypeId13(int, Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class Ticket(BaseModel):
    model_config = ConfigDict(extra="forbid")

    src_url: Optional[str] = Field(None, title="Source URL")
    title: Optional[str] = Field(None, title="Title")
    type: Optional[str] = Field(None, title="Ticket Type")
    type_id: Optional[TypeId13] = Field(None, title="Ticket Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")


class TypeId14(int, Enum):
    integer_3 = 3
    integer_6 = 6
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99
    integer_4 = 4
    integer_5 = 5
    integer_7 = 7
    integer_8 = 8


class Timespan(BaseModel):
    model_config = ConfigDict(extra="forbid")

    duration: Optional[int] = Field(None, title="Duration Milliseconds")
    duration_days: Optional[int] = Field(None, title="Duration Days")
    duration_hours: Optional[int] = Field(None, title="Duration Hours")
    duration_mins: Optional[int] = Field(None, title="Duration Minutes")
    duration_months: Optional[int] = Field(None, title="Duration Months")
    duration_secs: Optional[int] = Field(None, title="Duration Seconds")
    duration_weeks: Optional[int] = Field(None, title="Duration Weeks")
    duration_years: Optional[int] = Field(None, title="Duration Years")
    type: Optional[str] = Field(None, title="Time Span Type")
    type_id: Optional[TypeId14] = Field(None, title="Time Span Type ID")


class CategoryId1(int, Enum):
    integer_92 = 92
    integer_14 = 14
    integer_113 = 113
    integer_68 = 68
    integer_22 = 22
    integer_121 = 121
    integer_26 = 26
    integer_86 = 86
    integer_53 = 53
    integer_96 = 96
    integer_88 = 88
    integer_21 = 21
    integer_25 = 25
    integer_71 = 71
    integer_37 = 37
    integer_66 = 66
    integer_11 = 11
    integer_114 = 114
    integer_27 = 27
    integer_102 = 102
    integer_47 = 47
    integer_57 = 57
    integer_6 = 6
    integer_108 = 108
    integer_58 = 58
    integer_106 = 106
    integer_99 = 99
    integer_65 = 65
    integer_64 = 64
    integer_5 = 5
    integer_103 = 103
    integer_46 = 46
    integer_24 = 24
    integer_4 = 4
    integer_97 = 97
    integer_50 = 50
    integer_45 = 45
    integer_32 = 32
    integer_85 = 85
    integer_49 = 49
    integer_54 = 54
    integer_112 = 112
    integer_1 = 1
    integer_109 = 109
    integer_84 = 84
    integer_9 = 9
    integer_20 = 20
    integer_30 = 30
    integer_90 = 90
    integer_0 = 0
    integer_118 = 118
    integer_44 = 44
    integer_7 = 7
    integer_15 = 15
    integer_36 = 36
    integer_29 = 29
    integer_101 = 101
    integer_95 = 95
    integer_3 = 3
    integer_63 = 63
    integer_61 = 61
    integer_87 = 87
    integer_89 = 89
    integer_55 = 55
    integer_43 = 43
    integer_38 = 38
    integer_59 = 59
    integer_60 = 60
    integer_18 = 18
    integer_83 = 83
    integer_34 = 34
    integer_17 = 17
    integer_111 = 111
    integer_40 = 40
    integer_35 = 35
    integer_107 = 107
    integer_52 = 52
    integer_56 = 56
    integer_51 = 51
    integer_16 = 16
    integer_98 = 98
    integer_33 = 33
    integer_23 = 23
    integer_110 = 110
    integer_93 = 93
    integer_67 = 67
    integer_31 = 31


class Url(BaseModel):
    model_config = ConfigDict(extra="forbid")

    categories: Optional[List[str]] = Field(None, title="Website Categorization")
    category_ids: Optional[List[CategoryId1]] = Field(
        None, title="Website Categorization IDs"
    )
    domain: Optional[str] = Field(None, title="Domain")
    hostname: Optional[str] = Field(None, title="Hostname")
    path: Optional[str] = Field(None, title="Path")
    port: Optional[int] = Field(None, title="Port")
    query_string: Optional[str] = Field(None, title="HTTP Query String")
    resource_type: Optional[str] = Field(None, title="Resource Type")
    scheme: Optional[str] = Field(None, title="Scheme")
    subdomain: Optional[str] = Field(None, title="Subdomain")
    url_string: Optional[str] = Field(None, title="URL String")


class TypeId15(int, Enum):
    integer_3 = 3
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class VendorAttributes(BaseModel):
    model_config = ConfigDict(extra="forbid")

    severity: Optional[str] = Field(None, title="Severity")
    severity_id: Optional[SeverityId] = Field(None, title="Severity ID")


class DnssecStatusId(int, Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_99 = 99


class Account(BaseModel):
    model_config = ConfigDict(extra="forbid")

    labels: Optional[List[str]] = Field(None, title="Labels")
    name: Optional[str] = Field(None, title="Name")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")
    type: Optional[str] = Field(None, title="Type")
    type_id: Optional[TypeId] = Field(None, title="Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")


class Agent(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: Optional[str] = Field(None, title="Agent Name")
    policies: Optional[List[Policy]] = Field(None, title="Agent Policies")
    type: Optional[str] = Field(None, title="Agent Type")
    type_id: Optional[TypeId2] = Field(None, title="Type ID")
    uid: Optional[str] = Field(None, title="Agent ID")
    uid_alt: Optional[str] = Field(None, title="Alternate Agent ID")
    vendor_name: Optional[str] = Field(None, title="Vendor Name")
    version: Optional[str] = Field(None, title="Agent Version")


class Attack(BaseModel):
    model_config = ConfigDict(extra="forbid")

    sub_technique: Optional[SubTechnique] = Field(None, title="Sub Technique")
    tactic: Optional[Tactic] = Field(None, title="Tactic")
    tactics: Optional[List[Tactic]] = Field(None, title="Tactics")
    technique: Optional[Technique] = Field(None, title="Technique")
    version: Optional[str] = Field(None, title="Version")


class Authorization(BaseModel):
    model_config = ConfigDict(extra="forbid")

    decision: Optional[str] = Field(None, title="Authorization Decision/Outcome")
    policy: Optional[Policy] = Field(None, title="Policy")


class Certificate(BaseModel):
    model_config = ConfigDict(extra="forbid")

    created_time: Optional[int] = Field(None, title="Created Time")
    expiration_time: Optional[int] = Field(None, title="Expiration Time")
    fingerprints: Optional[List[Fingerprint]] = Field(None, title="Fingerprints")
    is_self_signed: Optional[bool] = Field(None, title="Certificate Self-Signed")
    issuer: str = Field(..., title="Issuer Distinguished Name")
    sans: Optional[List[San]] = Field(None, title="Subject Alternative Names")
    serial_number: str = Field(..., title="Certificate Serial Number")
    subject: Optional[str] = Field(None, title="Subject Distinguished Name")
    uid: Optional[str] = Field(None, title="Unique ID")
    version: Optional[str] = Field(None, title="Version")


class Cloud(BaseModel):
    model_config = ConfigDict(extra="forbid")

    account: Optional[Account] = Field(None, title="Account")
    cloud_partition: Optional[str] = Field(None, title="Cloud Partition")
    org: Optional[Organization] = Field(None, title="Organization")
    project_uid: Optional[str] = Field(None, title="Project ID")
    provider: str = Field(..., title="Provider")
    region: Optional[str] = Field(None, title="Region")
    zone: Optional[str] = Field(None, title="Network Zone")


class Cvss(BaseModel):
    model_config = ConfigDict(extra="forbid")

    base_score: float = Field(..., title="Base Score")
    depth: Optional[Depth] = Field(None, title="CVSS Depth")
    metrics: Optional[List[Metric]] = Field(None, title="Metrics")
    overall_score: Optional[float] = Field(None, title="Overall Score")
    severity: Optional[str] = Field(None, title="Severity")
    src_url: Optional[str] = Field(None, title="Source URL")
    vector_string: Optional[str] = Field(None, title="Vector String")
    vendor_name: Optional[str] = Field(None, title="Vendor Name")
    version: str = Field(..., title="Version")


class DeviceHwInfo(BaseModel):
    model_config = ConfigDict(extra="forbid")

    bios_date: Optional[str] = Field(None, title="BIOS Date")
    bios_manufacturer: Optional[str] = Field(None, title="BIOS Manufacturer")
    bios_ver: Optional[str] = Field(None, title="BIOS Version")
    chassis: Optional[str] = Field(None, title="Chassis")
    cpu_architecture: Optional[str] = Field(None, title="CPU Architecture")
    cpu_architecture_id: Optional[CpuArchitectureId] = Field(
        None, title="CPU Architecture ID"
    )
    cpu_bits: Optional[int] = Field(None, title="CPU Bits")
    cpu_cores: Optional[int] = Field(None, title="CPU Cores")
    cpu_count: Optional[int] = Field(None, title="CPU Count")
    cpu_speed: Optional[int] = Field(None, title="Processor Speed")
    cpu_type: Optional[str] = Field(None, title="Processor Type")
    desktop_display: Optional[Display] = Field(None, title="Desktop Display")
    keyboard_info: Optional[KeyboardInfo] = Field(None, title="Keyboard Information")
    ram_size: Optional[int] = Field(None, title="RAM Size")
    serial_number: Optional[str] = Field(None, title="Serial Number")
    uuid: Optional[str] = Field(None, title="UUID")
    vendor_name: Optional[str] = Field(None, title="Vendor Name")


class DigitalSignature(BaseModel):
    model_config = ConfigDict(extra="forbid")

    algorithm: Optional[str] = Field(None, title="Algorithm")
    algorithm_id: AlgorithmId = Field(..., title="Algorithm ID")
    certificate: Optional[Certificate] = Field(None, title="Certificate")
    created_time: Optional[int] = Field(None, title="Created Time")
    developer_uid: Optional[str] = Field(None, title="Developer UID")
    digest: Optional[Fingerprint] = Field(None, title="Message Digest")
    state: Optional[str] = Field(None, title="State")
    state_id: Optional[StateId] = Field(None, title="State ID")


class DiscoveryDetails(BaseModel):
    model_config = ConfigDict(extra="forbid")

    count: Optional[int] = Field(None, title="Count")
    occurrence_details: Optional[OccurrenceDetails] = Field(
        None, title="Occurrence Details"
    )
    type: Optional[str] = Field(None, title="Type")
    value: Optional[str] = Field(None, title="Value")


class DomainContact(BaseModel):
    model_config = ConfigDict(extra="forbid")

    email_addr: Optional[str] = Field(None, title="Contact Email")
    location: Optional[Location] = Field(None, title="Contact Location Information")
    name: Optional[str] = Field(None, title="Name")
    phone_number: Optional[str] = Field(None, title="Phone Number")
    type: Optional[str] = Field(None, title="Domain Contact Type")
    type_id: TypeId5 = Field(..., title="Domain Contact Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")


class Enrichment(BaseModel):
    model_config = ConfigDict(extra="forbid")

    created_time: Optional[int] = Field(None, title="Created Time")
    data: Any = Field(..., title="Data")
    desc: Optional[str] = Field(None, title="Description")
    name: str = Field(..., title="Name")
    provider: Optional[str] = Field(None, title="Provider")
    reputation: Optional[Reputation] = Field(None, title="Reputation Scores")
    short_desc: Optional[str] = Field(None, title="Short Description")
    src_url: Optional[str] = Field(None, title="Source URL")
    type: Optional[str] = Field(None, title="Type")
    value: str = Field(..., title="Value")


class Image(BaseModel):
    model_config = ConfigDict(extra="forbid")

    labels: Optional[List[str]] = Field(None, title="Labels")
    name: Optional[str] = Field(None, title="Name")
    path: Optional[str] = Field(None, title="Path")
    tag: Optional[str] = Field(None, title="Image Tag")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")
    uid: str = Field(..., title="Unique ID")


class KbArticle(BaseModel):
    model_config = ConfigDict(extra="forbid")

    avg_timespan: Optional[Timespan] = Field(None, title="Average Timespan")
    bulletin: Optional[str] = Field(None, title="Patch Bulletin")
    classification: Optional[str] = Field(None, title="Classification")
    created_time: Optional[int] = Field(None, title="Created Time")
    install_state: Optional[str] = Field(None, title="Install State")
    install_state_id: Optional[InstallStateId] = Field(None, title="Install State ID")
    is_superseded: Optional[bool] = Field(None, title="The patch is superseded.")
    os: Optional[Os] = Field(None, title="OS")
    product: Optional[Product] = Field(None, title="Product")
    severity: Optional[str] = Field(None, title="Severity")
    size: Optional[int] = Field(None, title="Size")
    src_url: Optional[str] = Field(None, title="Source URL")
    title: Optional[str] = Field(None, title="Title")
    uid: str = Field(..., title="Unique ID")


class Observable(BaseModel):
    model_config = ConfigDict(extra="forbid")

    name: Optional[str] = Field(None, title="Name")
    reputation: Optional[Reputation] = Field(None, title="Reputation Scores")
    type: Optional[str] = Field(None, title="Type")
    type_id: TypeId8 = Field(..., title="Type ID")
    value: Optional[str] = Field(None, title="Value")


class RelatedEvent(BaseModel):
    model_config = ConfigDict(extra="forbid")

    attacks: Optional[List[Attack]] = Field(None, title="MITRE ATT&CK® Details")
    count: Optional[int] = Field(None, title="Count")
    created_time: Optional[int] = Field(None, title="Created Time")
    desc: Optional[str] = Field(None, title="Description")
    first_seen_time: Optional[int] = Field(None, title="First Seen")
    kill_chain: Optional[List[KillChainPhase]] = Field(None, title="Kill Chain")
    last_seen_time: Optional[int] = Field(None, title="Last Seen")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    observables: Optional[List[Observable]] = Field(None, title="Observables")
    product: Optional[Product] = Field(None, title="Product")
    product_uid: Optional[str] = Field(None, title="Product Identifier")
    severity: Optional[str] = Field(None, title="Severity")
    severity_id: Optional[SeverityId] = Field(None, title="Severity ID")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")
    title: Optional[str] = Field(None, title="Title")
    type: Optional[str] = Field(None, title="Type")
    type_name: Optional[str] = Field(None, title="Type Name")
    type_uid: Optional[int] = Field(None, title="Type ID")
    uid: str = Field(..., title="Unique ID")


class Remediation(BaseModel):
    model_config = ConfigDict(extra="forbid")

    desc: str = Field(..., title="Description")
    kb_article_list: Optional[List[KbArticle]] = Field(
        None, title="Knowledgebase Articles"
    )
    kb_articles: Optional[List[str]] = Field(None, title="Knowledgebase Articles")
    references: Optional[List[str]] = Field(None, title="References")


class Sso(BaseModel):
    model_config = ConfigDict(extra="forbid")

    auth_protocol: Optional[str] = Field(None, title="Auth Protocol")
    auth_protocol_id: Optional[AuthProtocolId] = Field(None, title="Auth Protocol ID")
    certificate: Optional[Certificate] = Field(None, title="SAML Certificate")
    created_time: Optional[int] = Field(None, title="Created Time")
    duration_mins: Optional[int] = Field(None, title="SSO Session Duration")
    idle_timeout: Optional[int] = Field(None, title="SSO Idle Timeout")
    login_endpoint: Optional[str] = Field(None, title="SSO Login Endpoint")
    logout_endpoint: Optional[str] = Field(None, title="SSO Logout Endpoint")
    metadata_endpoint: Optional[str] = Field(None, title="SSO Metadata Endpoint")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    name: Optional[str] = Field(None, title="Name")
    protocol_name: Optional[str] = Field(None, title="Supported Protocol")
    scopes: Optional[List[str]] = Field(None, title="Scopes")
    uid: Optional[str] = Field(None, title="Unique ID")
    vendor_name: Optional[str] = Field(None, title="Service Provider")


class Whois(BaseModel):
    model_config = ConfigDict(extra="forbid")

    autonomous_system: Optional[AutonomousSystem] = Field(
        None, title="Autonomous System"
    )
    created_time: Optional[int] = Field(None, title="Registered At")
    dnssec_status: Optional[str] = Field(None, title="DNSSEC Status")
    dnssec_status_id: Optional[DnssecStatusId] = Field(None, title="DNSSEC Status ID")
    domain: Optional[str] = Field(None, title="Domain")
    domain_contacts: Optional[List[DomainContact]] = Field(
        None, title="Domain Contacts"
    )
    email_addr: Optional[str] = Field(None, title="Registrar Abuse Email Address")
    last_seen_time: Optional[int] = Field(None, title="Last Updated At")
    name_servers: Optional[List[str]] = Field(None, title="Name Servers")
    phone_number: Optional[str] = Field(None, title="Registrar Abuse Phone Number")
    registrar: Optional[str] = Field(None, title="Domain Registrar")
    status: Optional[str] = Field(None, title="Domain Status")
    subdomains: Optional[List[str]] = Field(None, title="Subdomains")
    subnet: Optional[str] = Field(None, title="Subnet Block")


class AffectedPackage(BaseModel):
    model_config = ConfigDict(extra="forbid")

    architecture: Optional[str] = Field(None, title="Architecture")
    cpe_name: Optional[str] = Field(None, title="The product CPE identifier")
    epoch: Optional[int] = Field(None, title="Epoch")
    fixed_in_version: Optional[str] = Field(None, title="Fixed In Version")
    hash: Optional[Fingerprint] = Field(None, title="Hash")
    license: Optional[str] = Field(None, title="Software License")
    name: str = Field(..., title="Name")
    package_manager: Optional[str] = Field(None, title="Package Manager")
    path: Optional[str] = Field(None, title="Path")
    purl: Optional[str] = Field(None, title="Package URL")
    release: Optional[str] = Field(None, title="Software Release Details")
    remediation: Optional[Remediation] = Field(None, title="Remediation Guidance")
    type: Optional[str] = Field(None, title="Type")
    type_id: Optional[TypeId1] = Field(None, title="Type ID")
    vendor_name: Optional[str] = Field(None, title="Vendor Name")
    version: str = Field(..., title="Version")


class Container(BaseModel):
    model_config = ConfigDict(extra="forbid")

    hash: Optional[Fingerprint] = Field(None, title="Hash")
    image: Optional[Image] = Field(None, title="Image")
    labels: Optional[List[str]] = Field(None, title="Labels")
    name: Optional[str] = Field(None, title="Name")
    network_driver: Optional[str] = Field(None, title="Network Driver")
    orchestrator: Optional[str] = Field(None, title="Orchestrator")
    pod_uuid: Optional[str] = Field(None, title="Pod UUID")
    runtime: Optional[str] = Field(None, title="Runtime")
    size: Optional[int] = Field(None, title="Size")
    tag: Optional[str] = Field(None, title="Image Tag")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")
    uid: Optional[str] = Field(None, title="Unique ID")


class Cve(BaseModel):
    model_config = ConfigDict(extra="forbid")

    created_time: Optional[int] = Field(None, title="Created Time")
    cvss: Optional[List[Cvss]] = Field(None, title="CVSS Score")
    cwe: Optional[Cwe] = Field(None, title="CWE")
    cwe_uid: Optional[str] = Field(None, title="CWE UID")
    cwe_url: Optional[str] = Field(None, title="CWE URL")
    desc: Optional[str] = Field(None, title="Description")
    epss: Optional[Epss] = Field(None, title="EPSS")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    product: Optional[Product] = Field(None, title="Product")
    references: Optional[List[str]] = Field(None, title="References")
    related_cwes: Optional[List[Cwe]] = Field(None, title="Related CWEs")
    title: Optional[str] = Field(None, title="Title")
    type: Optional[str] = Field(None, title="Vulnerability Type")
    uid: str = Field(..., title="CVE ID")


class DataClassification(BaseModel):
    model_config = ConfigDict(extra="forbid")

    category: Optional[str] = Field(None, title="Category")
    category_id: Optional[CategoryId] = Field(None, title="Category ID")
    classifier_details: Optional[ClassifierDetails] = Field(
        None, title="Classifier Details"
    )
    confidentiality: Optional[str] = Field(None, title="Confidentiality")
    confidentiality_id: Optional[ConfidentialityId] = Field(
        None, title="Confidentiality ID"
    )
    discovery_details: Optional[List[DiscoveryDetails]] = Field(
        None, title="Discovery Details"
    )
    policy: Optional[Policy] = Field(None, title="Policy")
    size: Optional[int] = Field(None, title="Size")
    src_url: Optional[str] = Field(None, title="Source URL")
    status: Optional[str] = Field(None, title="Status")
    status_details: Optional[List[str]] = Field(None, title="Status Details")
    status_id: Optional[StatusId1] = Field(None, title="Status ID")
    total: Optional[int] = Field(None, title="Total")
    uid: Optional[str] = Field(None, title="Unique ID")


class FindingInfo(BaseModel):
    model_config = ConfigDict(extra="forbid")

    analytic: Optional[Analytic] = Field(None, title="Analytic")
    attacks: Optional[List[Attack]] = Field(None, title="MITRE ATT&CK® Details")
    created_time: Optional[int] = Field(None, title="Created Time")
    data_sources: Optional[List[str]] = Field(None, title="Data Sources")
    desc: Optional[str] = Field(None, title="Description")
    first_seen_time: Optional[int] = Field(None, title="First Seen")
    kill_chain: Optional[List[KillChainPhase]] = Field(None, title="Kill Chain")
    last_seen_time: Optional[int] = Field(None, title="Last Seen")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    product: Optional[Product] = Field(None, title="Product")
    product_uid: Optional[str] = Field(None, title="Product Identifier")
    related_analytics: Optional[List[Analytic]] = Field(None, title="Related Analytics")
    related_events: Optional[List[RelatedEvent]] = Field(
        None, title="Related Events/Findings"
    )
    related_events_count: Optional[int] = Field(
        None, title="Related Events/Findings Count"
    )
    src_url: Optional[str] = Field(None, title="Source URL")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")
    title: Optional[str] = Field(None, title="Title")
    types: Optional[List[str]] = Field(None, title="Types")
    uid: str = Field(..., title="Unique ID")
    uid_alt: Optional[str] = Field(None, title="Alternate ID")


class Malware(BaseModel):
    model_config = ConfigDict(extra="forbid")

    classification_ids: List[ClassificationId] = Field(..., title="Classification IDs")
    classifications: Optional[List[str]] = Field(None, title="Classifications")
    cves: Optional[List[Cve]] = Field(None, title="CVE List")
    name: Optional[str] = Field(None, title="Name")
    path: Optional[str] = Field(None, title="Path")
    provider: Optional[str] = Field(None, title="Provider")
    uid: Optional[str] = Field(None, title="Unique ID")


class Request(BaseModel):
    model_config = ConfigDict(extra="forbid")

    containers: Optional[List[Container]] = Field(None, title="Containers")
    data: Optional[Any] = Field(None, title="Data")
    flags: Optional[List[str]] = Field(None, title="Flags")
    uid: str = Field(..., title="Unique ID")


class Response(BaseModel):
    model_config = ConfigDict(extra="forbid")

    code: Optional[int] = Field(None, title="Response Code")
    containers: Optional[List[Container]] = Field(None, title="Containers")
    data: Optional[Any] = Field(None, title="Data")
    error: Optional[str] = Field(None, title="Error Code")
    error_message: Optional[str] = Field(None, title="Error Message")
    flags: Optional[List[str]] = Field(None, title="Flags")
    message: Optional[str] = Field(None, title="Message")


class Advisory(BaseModel):
    model_config = ConfigDict(extra="forbid")

    avg_timespan: Optional[Timespan] = Field(None, title="Average Timespan")
    bulletin: Optional[str] = Field(None, title="Patch Bulletin")
    classification: Optional[str] = Field(None, title="Classification")
    created_time: Optional[int] = Field(None, title="Created Time")
    desc: Optional[str] = Field(None, title="Description")
    install_state: Optional[str] = Field(None, title="Install State")
    install_state_id: Optional[InstallStateId] = Field(None, title="Install State ID")
    is_superseded: Optional[bool] = Field(None, title="The patch is superseded.")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    os: Optional[Os] = Field(None, title="OS")
    product: Optional[Product] = Field(None, title="Product")
    references: Optional[List[str]] = Field(None, title="References")
    related_cves: Optional[List[Cve]] = Field(None, title="Related CVEs")
    related_cwes: Optional[List[Cwe]] = Field(None, title="Related CWEs")
    size: Optional[int] = Field(None, title="Size")
    src_url: Optional[str] = Field(None, title="Source URL")
    title: Optional[str] = Field(None, title="Title")
    uid: str = Field(..., title="Advisory ID")


class Api(BaseModel):
    model_config = ConfigDict(extra="forbid")

    group: Optional[Group] = Field(None, title="Group")
    operation: str = Field(..., title="Operation")
    request: Optional[Request] = Field(None, title="API Request Details")
    response: Optional[Response] = Field(None, title="API Response Details")
    service: Optional[Service] = Field(None, title="Service")
    version: Optional[str] = Field(None, title="Version")


class Actor(BaseModel):
    model_config = ConfigDict(extra="forbid")

    app_name: Optional[str] = Field(None, title="Application Name")
    app_uid: Optional[str] = Field(None, title="Application ID")
    authorizations: Optional[List[Authorization]] = Field(
        None, title="Authorization Information"
    )
    idp: Optional[Idp] = Field(None, title="Identity Provider")
    invoked_by: Optional[str] = Field(None, title="Invoked by")
    process: Optional[Process] = Field(None, title="Process")
    session: Optional[Session] = Field(None, title="Session")
    user: Optional[User] = Field(None, title="User")


class AffectedCode(BaseModel):
    model_config = ConfigDict(extra="forbid")

    end_line: Optional[int] = Field(None, title="End Line")
    file: File = Field(..., title="File")
    owner: Optional[User] = Field(None, title="Owner")
    remediation: Optional[Remediation] = Field(None, title="Remediation Guidance")
    start_line: Optional[int] = Field(None, title="Start Line")


class AuthFactor(BaseModel):
    model_config = ConfigDict(extra="forbid")

    device: Optional[Device] = Field(None, title="Device")
    email_addr: Optional[str] = Field(None, title="Email Address")
    factor_type: Optional[str] = Field(None, title="Factor Type")
    factor_type_id: FactorTypeId = Field(..., title="Factor Type ID")
    is_hotp: Optional[bool] = Field(None, title="HMAC-based One-time Password (HOTP)")
    is_totp: Optional[bool] = Field(None, title="Time-based One-time Password (TOTP)")
    phone_number: Optional[str] = Field(None, title="Phone Number")
    provider: Optional[str] = Field(None, title="Provider")
    security_questions: Optional[List[str]] = Field(None, title="Security Questions")


class Device(BaseModel):
    model_config = ConfigDict(extra="forbid")

    agent_list: Optional[List[Agent]] = Field(None, title="Agent List")
    autoscale_uid: Optional[str] = Field(None, title="Autoscale UID")
    boot_time: Optional[int] = Field(None, title="Boot Time")
    created_time: Optional[int] = Field(None, title="Created Time")
    desc: Optional[str] = Field(None, title="Description")
    domain: Optional[str] = Field(None, title="Domain")
    first_seen_time: Optional[int] = Field(None, title="First Seen")
    groups: Optional[List[Group]] = Field(None, title="Groups")
    hostname: Optional[str] = Field(None, title="Hostname")
    hw_info: Optional[DeviceHwInfo] = Field(None, title="Hardware Info")
    hypervisor: Optional[str] = Field(None, title="Hypervisor")
    image: Optional[Image] = Field(None, title="Image")
    imei: Optional[str] = Field(None, title="IMEI")
    imei_list: Optional[List[str]] = Field(None, title="IMEI List")
    instance_uid: Optional[str] = Field(None, title="Instance ID")
    interface_name: Optional[str] = Field(None, title="Network Interface Name")
    interface_uid: Optional[str] = Field(None, title="Network Interface ID")
    ip: Optional[str] = Field(None, title="IP Address")
    is_compliant: Optional[bool] = Field(None, title="Compliant Device")
    is_managed: Optional[bool] = Field(None, title="Managed Device")
    is_personal: Optional[bool] = Field(None, title="Personal Device")
    is_trusted: Optional[bool] = Field(None, title="Trusted Device")
    last_seen_time: Optional[int] = Field(None, title="Last Seen")
    location: Optional[Location] = Field(None, title="Geo Location")
    mac: Optional[str] = Field(None, title="MAC Address")
    model: Optional[str] = Field(None, title="Model")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    name: Optional[str] = Field(None, title="Name")
    network_interfaces: Optional[List[NetworkInterface]] = Field(
        None, title="Network Interfaces"
    )
    org: Optional[Organization] = Field(None, title="Organization")
    os: Optional[Os] = Field(None, title="OS")
    os_machine_uuid: Optional[str] = Field(None, title="OS Machine UUID")
    owner: Optional[User] = Field(None, title="Owner")
    region: Optional[str] = Field(None, title="Region")
    risk_level: Optional[str] = Field(None, title="Risk Level")
    risk_level_id: Optional[RiskLevelId] = Field(None, title="Risk Level ID")
    risk_score: Optional[int] = Field(None, title="Risk Score")
    subnet: Optional[str] = Field(None, title="Subnet")
    subnet_uid: Optional[str] = Field(None, title="Subnet UID")
    type: Optional[str] = Field(None, title="Type")
    type_id: TypeId4 = Field(..., title="Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")
    uid_alt: Optional[str] = Field(None, title="Alternate ID")
    vendor_name: Optional[str] = Field(None, title="Vendor Name")
    vlan_uid: Optional[str] = Field(None, title="VLAN")
    vpc_uid: Optional[str] = Field(None, title="VPC UID")
    zone: Optional[str] = Field(None, title="Network Zone")


class Email(BaseModel):
    model_config = ConfigDict(extra="forbid")

    cc: Optional[List[str]] = Field(None, title="Cc")
    cc_mailboxes: Optional[List[str]] = Field(None, title="Cc Mailboxes")
    delivered_to: Optional[str] = Field(None, title="Delivered To")
    delivered_to_list: Optional[List[str]] = Field(None, title="Delivered To")
    files: Optional[List[File]] = Field(None, title="Files")
    from_: Optional[str] = Field(None, alias="from", title="From")
    from_mailbox: Optional[str] = Field(None, title="From Mailbox")
    http_headers: Optional[List[HttpHeader]] = Field(None, title="HTTP Headers")
    message_uid: Optional[str] = Field(None, title="Message UID")
    raw_header: Optional[str] = Field(None, title="Raw Header")
    reply_to: Optional[str] = Field(None, title="Reply To")
    reply_to_mailboxes: Optional[List[str]] = Field(None, title="Reply To Mailboxes")
    size: Optional[int] = Field(None, title="Size")
    smtp_from: Optional[str] = Field(None, title="SMTP From")
    smtp_to: Optional[List[str]] = Field(None, title="SMTP To")
    subject: Optional[str] = Field(None, title="Subject")
    to: Optional[List[str]] = Field(None, title="To")
    to_mailboxes: Optional[List[str]] = Field(None, title="To Mailboxes")
    uid: Optional[str] = Field(None, title="Email Thread UID")
    urls: Optional[List[Url]] = Field(None, title="URLs")
    x_originating_ip: Optional[List[str]] = Field(None, title="X-Originating-IP")


class File(BaseModel):
    model_config = ConfigDict(extra="forbid")

    accessed_time: Optional[int] = Field(None, title="Accessed Time")
    accessor: Optional[User] = Field(None, title="Accessor")
    attributes: Optional[int] = Field(None, title="Attributes")
    company_name: Optional[str] = Field(None, title="Company Name")
    confidentiality: Optional[str] = Field(None, title="Confidentiality")
    confidentiality_id: Optional[ConfidentialityId] = Field(
        None, title="Confidentiality ID"
    )
    created_time: Optional[int] = Field(None, title="Created Time")
    creator: Optional[User] = Field(None, title="Creator")
    desc: Optional[str] = Field(None, title="Description")
    drive_type: Optional[str] = Field(None, title="Drive Type")
    drive_type_id: Optional[DriveTypeId] = Field(None, title="Drive Type ID")
    encryption_details: Optional[EncryptionDetails] = Field(
        None, title="Encryption Details"
    )
    ext: Optional[str] = Field(None, title="File Extension")
    hashes: Optional[List[Fingerprint]] = Field(None, title="Hashes")
    internal_name: Optional[str] = Field(None, title="Internal Name")
    is_deleted: Optional[bool] = Field(None, title="Deleted")
    is_encrypted: Optional[bool] = Field(None, title="Encrypted")
    is_system: Optional[bool] = Field(None, title="System")
    mime_type: Optional[str] = Field(None, title="MIME type")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    modifier: Optional[User] = Field(None, title="Modifier")
    name: str = Field(..., title="Name")
    owner: Optional[User] = Field(None, title="Owner")
    parent_folder: Optional[str] = Field(None, title="Parent Folder")
    path: Optional[str] = Field(None, title="Path")
    product: Optional[Product] = Field(None, title="Product")
    security_descriptor: Optional[str] = Field(None, title="Security Descriptor")
    signature: Optional[DigitalSignature] = Field(None, title="Digital Signature")
    size: Optional[int] = Field(None, title="Size")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")
    type: Optional[str] = Field(None, title="Type")
    type_id: TypeId6 = Field(..., title="Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")
    url: Optional[Url] = Field(None, title="URL")
    version: Optional[str] = Field(None, title="Version")
    xattributes: Optional[Object] = Field(None, title="Extended Attributes")


class Idp(BaseModel):
    model_config = ConfigDict(extra="forbid")

    auth_factors: Optional[List[AuthFactor]] = Field(
        None, title="Authentication Factors"
    )
    domain: Optional[str] = Field(None, title="Domain")
    fingerprint: Optional[Fingerprint] = Field(None, title="Certificate Fingerprint")
    has_mfa: Optional[bool] = Field(None, title="MFA Enforced")
    issuer: Optional[str] = Field(None, title="Issuer Details")
    name: Optional[str] = Field(None, title="Name")
    protocol_name: Optional[str] = Field(None, title="Supported Protocol")
    scim: Optional[Scim] = Field(None, title="SCIM")
    sso: Optional[Sso] = Field(None, title="SSO")
    state: Optional[str] = Field(None, title="State")
    state_id: Optional[StateId1] = Field(None, title="State ID")
    tenant_uid: Optional[str] = Field(None, title="Tenant UID")
    uid: Optional[str] = Field(None, title="Unique ID")
    url_string: Optional[str] = Field(None, title="Configuration URL")


class LdapPerson(BaseModel):
    model_config = ConfigDict(extra="forbid")

    cost_center: Optional[str] = Field(None, title="Cost Center")
    created_time: Optional[int] = Field(None, title="Created Time")
    deleted_time: Optional[int] = Field(None, title="Deleted Time")
    email_addrs: Optional[List[str]] = Field(None, title="Email Addresses")
    employee_uid: Optional[str] = Field(None, title="Employee ID")
    given_name: Optional[str] = Field(None, title="Given Name")
    hire_time: Optional[int] = Field(None, title="Hire Time")
    job_title: Optional[str] = Field(None, title="Job Title")
    labels: Optional[List[str]] = Field(None, title="Labels")
    last_login_time: Optional[int] = Field(None, title="Last Login")
    ldap_cn: Optional[str] = Field(None, title="LDAP Common Name")
    ldap_dn: Optional[str] = Field(None, title="LDAP Distinguished Name")
    leave_time: Optional[int] = Field(None, title="Leave Time")
    location: Optional[Location] = Field(None, title="Geo Location")
    manager: Optional[User] = Field(None, title="Manager")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    office_location: Optional[str] = Field(None, title="Office Location")
    phone_number: Optional[str] = Field(None, title="Telephone Number")
    surname: Optional[str] = Field(None, title="Surname")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")


class Logger(BaseModel):
    model_config = ConfigDict(extra="forbid")

    device: Optional[Device] = Field(None, title="Device")
    event_uid: Optional[str] = Field(None, title="Event UID")
    log_level: Optional[str] = Field(None, title="Log Level")
    log_name: Optional[str] = Field(None, title="Log Name")
    log_provider: Optional[str] = Field(None, title="Log Provider")
    log_version: Optional[str] = Field(None, title="Log Version")
    logged_time: Optional[int] = Field(None, title="Logged Time")
    name: Optional[str] = Field(None, title="Name")
    product: Optional[Product] = Field(None, title="Product")
    transmit_time: Optional[int] = Field(None, title="Transmission Time")
    uid: Optional[str] = Field(None, title="Unique ID")
    version: Optional[str] = Field(None, title="Version")


class Metadata(BaseModel):
    model_config = ConfigDict(extra="forbid")

    correlation_uid: Optional[str] = Field(None, title="Correlation UID")
    debug: Optional[List[str]] = Field(None, title="Debug Information")
    event_code: Optional[str] = Field(None, title="Event Code")
    extension: Optional[Extension] = Field(None, title="Schema Extension")
    extensions: Optional[List[Extension]] = Field(None, title="Schema Extensions")
    labels: Optional[List[str]] = Field(None, title="Labels")
    log_level: Optional[str] = Field(None, title="Log Level")
    log_name: Optional[str] = Field(None, title="Log Name")
    log_provider: Optional[str] = Field(None, title="Log Provider")
    log_version: Optional[str] = Field(None, title="Log Version")
    logged_time: Optional[int] = Field(None, title="Logged Time")
    loggers: Optional[List[Logger]] = Field(None, title="Loggers")
    modified_time: Optional[int] = Field(None, title="Modified Time")
    original_time: Optional[str] = Field(None, title="Original Time")
    processed_time: Optional[int] = Field(None, title="Processed Time")
    product: Product = Field(..., title="Product")
    profiles: Optional[List[str]] = Field(None, title="Profiles")
    sequence: Optional[int] = Field(None, title="Sequence Number")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")
    tenant_uid: Optional[str] = Field(None, title="Tenant UID")
    uid: Optional[str] = Field(None, title="Event UID")
    version: str = Field(..., title="Version")


class Osint(BaseModel):
    model_config = ConfigDict(extra="forbid")

    answers: Optional[List[DnsAnswer]] = Field(None, title="Related DNS Answers")
    attacks: Optional[List[Attack]] = Field(None, title="MITRE ATT&CK® Details")
    autonomous_system: Optional[AutonomousSystem] = Field(
        None, title="Autonomous System"
    )
    comment: Optional[str] = Field(None, title="Analyst Comments")
    confidence: Optional[str] = Field(None, title="Confidence")
    confidence_id: Optional[ConfidenceId] = Field(None, title="Confidence ID")
    email: Optional[Email] = Field(None, title="Related Email")
    email_auth: Optional[EmailAuth] = Field(None, title="Related Email Authentication")
    file: Optional[File] = Field(None, title="Related File")
    kill_chain: Optional[List[KillChainPhase]] = Field(None, title="Kill Chain")
    location: Optional[Location] = Field(None, title="Geo Location")
    name: Optional[str] = Field(None, title="Name")
    related_analytics: Optional[List[Analytic]] = Field(None, title="Related Analytics")
    reputation: Optional[Reputation] = Field(None, title="Reputation Scores")
    script: Optional[Script] = Field(None, title="Related Script Data")
    signatures: Optional[List[DigitalSignature]] = Field(
        None, title="Related Digital Signatures"
    )
    src_url: Optional[str] = Field(None, title="Source URL")
    subdomains: Optional[List[str]] = Field(None, title="Related Subdomains")
    subnet: Optional[str] = Field(None, title="Related Subnet")
    tlp: Optional[Tlp] = Field(None, title="Traffic Light Protocol")
    type: Optional[str] = Field(None, title="Type")
    type_id: TypeId10 = Field(..., title="Indicator Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")
    value: str = Field(..., title="Indicator")
    vendor_name: Optional[str] = Field(None, title="Vendor Name")
    vulnerabilities: Optional[List[Vulnerability]] = Field(
        None, title="Related Vulnerabilities"
    )
    whois: Optional[Whois] = Field(None, title="WHOIS")


class Process(BaseModel):
    model_config = ConfigDict(extra="forbid")

    ancestry: Optional[List[ProcessEntity]] = Field(None, title="Ancestry")
    cmd_line: Optional[str] = Field(None, title="Command Line")
    created_time: Optional[int] = Field(None, title="Created Time")
    environment_variables: Optional[List[EnvironmentVariable]] = Field(
        None, title="Environment Variables"
    )
    file: Optional[File] = Field(None, title="File")
    integrity: Optional[str] = Field(None, title="Integrity")
    integrity_id: Optional[IntegrityId] = Field(None, title="Integrity Level")
    lineage: Optional[List[str]] = Field(None, title="Lineage")
    loaded_modules: Optional[List[str]] = Field(None, title="Loaded Modules")
    name: Optional[str] = Field(None, title="Name")
    parent_process: Optional[Process] = Field(None, title="Parent Process")
    path: Optional[str] = Field(None, title="Path")
    pid: Optional[int] = Field(None, title="Process ID")
    sandbox: Optional[str] = Field(None, title="Sandbox")
    session: Optional[Session] = Field(None, title="Session")
    terminated_time: Optional[int] = Field(None, title="Terminated Time")
    tid: Optional[int] = Field(None, title="Thread ID")
    uid: Optional[str] = Field(None, title="Unique ID")
    user: Optional[User] = Field(None, title="User")
    working_directory: Optional[str] = Field(None, title="Working Directory")
    xattributes: Optional[Object] = Field(None, title="Extended Attributes")


class ResourceDetails(BaseModel):
    model_config = ConfigDict(extra="forbid")

    agent_list: Optional[List[Agent]] = Field(None, title="Agent List")
    criticality: Optional[str] = Field(None, title="Criticality")
    data: Optional[Any] = Field(None, title="Data")
    group: Optional[Group] = Field(None, title="Group")
    hostname: Optional[str] = Field(None, title="Hostname")
    ip: Optional[str] = Field(None, title="IP Address")
    labels: Optional[List[str]] = Field(None, title="Labels")
    name: Optional[str] = Field(None, title="Name")
    namespace: Optional[str] = Field(None, title="Namespace")
    owner: Optional[User] = Field(None, title="Owner")
    tags: Optional[List[KeyValueObject]] = Field(None, title="Tags")
    type: Optional[str] = Field(None, title="Type")
    uid: Optional[str] = Field(None, title="Unique ID")
    version: Optional[str] = Field(None, title="Version")


class Script(BaseModel):
    model_config = ConfigDict(extra="forbid")

    file: Optional[File] = Field(None, title="File")
    hashes: Optional[List[Fingerprint]] = Field(None, title="Hashes")
    name: Optional[str] = Field(None, title="Name")
    parent_uid: Optional[str] = Field(None, title="Parent Unique ID")
    script_content: LongString = Field(..., title="Script Content")
    type: Optional[str] = Field(None, title="Type")
    type_id: TypeId12 = Field(..., title="Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")


class User(BaseModel):
    model_config = ConfigDict(extra="forbid")

    account: Optional[Account] = Field(None, title="Account")
    credential_uid: Optional[str] = Field(None, title="User Credential ID")
    domain: Optional[str] = Field(None, title="Domain")
    email_addr: Optional[str] = Field(None, title="Email Address")
    forward_addr: Optional[str] = Field(None, title="Forwarding Address")
    full_name: Optional[str] = Field(None, title="Full Name")
    groups: Optional[List[Group]] = Field(None, title="Groups")
    has_mfa: Optional[bool] = Field(None, title="MFA Assigned")
    ldap_person: Optional[LdapPerson] = Field(None, title="LDAP Person")
    name: Optional[str] = Field(None, title="Name")
    org: Optional[Organization] = Field(None, title="Organization")
    phone_number: Optional[str] = Field(None, title="Telephone Number")
    risk_level: Optional[str] = Field(None, title="Risk Level")
    risk_level_id: Optional[RiskLevelId] = Field(None, title="Risk Level ID")
    risk_score: Optional[int] = Field(None, title="Risk Score")
    type: Optional[str] = Field(None, title="Type")
    type_id: Optional[TypeId15] = Field(None, title="Type ID")
    uid: Optional[str] = Field(None, title="Unique ID")
    uid_alt: Optional[str] = Field(None, title="Alternate ID")


class Vulnerability(BaseModel):
    model_config = ConfigDict(extra="forbid")

    advisory: Optional[Advisory] = Field(None, title="Security Advisory")
    affected_code: Optional[List[AffectedCode]] = Field(None, title="Affected Code")
    affected_packages: Optional[List[AffectedPackage]] = Field(
        None, title="Affected Software Packages"
    )
    cve: Optional[Cve] = Field(None, title="CVE")
    cwe: Optional[Cwe] = Field(None, title="CWE")
    desc: Optional[str] = Field(None, title="Description")
    exploit_last_seen_time: Optional[int] = Field(None, title="Exploit Last Seen Time")
    first_seen_time: Optional[int] = Field(None, title="First Seen")
    fix_available: Optional[bool] = Field(None, title="Fix Availability")
    is_exploit_available: Optional[bool] = Field(None, title="Exploit Availability")
    is_fix_available: Optional[bool] = Field(None, title="Fix Availability")
    kb_article_list: Optional[List[KbArticle]] = Field(
        None, title="Knowledgebase Articles"
    )
    kb_articles: Optional[List[str]] = Field(None, title="Knowledgebase Articles")
    last_seen_time: Optional[int] = Field(None, title="Last Seen")
    packages: Optional[List[Package]] = Field(None, title="Software Packages")
    references: Optional[List[str]] = Field(None, title="References")
    related_vulnerabilities: Optional[List[str]] = Field(
        None, title="Related Vulnerability IDs"
    )
    remediation: Optional[Remediation] = Field(None, title="Remediation Guidance")
    severity: Optional[str] = Field(None, title="Severity")
    title: Optional[str] = Field(None, title="Title")
    vendor_name: Optional[str] = Field(None, title="Vendor Name")


class VulnerabilityFinding(BaseModel):
    model_config = ConfigDict(
        extra="forbid", use_enum_values=True, serialize_by_alias=True
    )

    activity_id: ActivityId = Field(..., title="Activity ID")
    activity_name: Optional[str] = Field(None, title="Activity")
    category_name: Optional[str] = Field(None, title="Category")
    category_uid: int = Field(2, title="Category ID")
    class_name: Optional[str] = Field(None, title="Class")
    class_uid: int = Field(2002, title="Class ID")
    comment: Optional[str] = Field(None, title="Comment")
    count: Optional[int] = Field(None, title="Count")
    duration: Optional[int] = Field(None, title="Duration Milliseconds")
    end_time: Optional[int] = Field(None, title="End Time")
    enrichments: Optional[List[Enrichment]] = Field(None, title="Enrichments")
    finding_info: FindingInfo = Field(..., title="Finding Information")
    message: Optional[str] = Field(None, title="Message")
    metadata: Metadata = Field(..., title="Metadata")
    observables: Optional[List[Observable]] = Field(None, title="Observables")
    raw_data: Optional[str] = Field(None, title="Raw Data")
    resource: Optional[ResourceDetails] = Field(None, title="Resource")
    resources: Optional[List[ResourceDetails]] = Field(None, title="Affected Resources")
    severity: Optional[str] = Field(None, title="Severity")
    severity_id: SeverityId = Field(..., title="Severity ID")
    start_time: Optional[int] = Field(None, title="Start Time")
    status: Optional[str] = Field(None, title="Status")
    status_code: Optional[str] = Field(None, title="Status Code")
    status_detail: Optional[str] = Field(None, title="Status Detail")
    status_id: Optional[StatusId] = Field(None, title="Status ID")
    time: int = Field(..., title="Event Time")
    timezone_offset: Optional[int] = Field(None, title="Timezone Offset")
    type_name: Optional[str] = Field(None, title="Type Name")
    type_uid: int = Field(..., title="Type ID")
    unmapped: Optional[Object] = Field(None, title="Unmapped Data")
    vendor_attributes: Optional[VendorAttributes] = Field(
        None, title="Vendor Attributes"
    )
    vulnerabilities: List[Vulnerability] = Field(..., title="Vulnerabilities")


Analytic.model_rebuild()
VulnerabilityFinding.model_rebuild()
Actor.model_rebuild()
AffectedCode.model_rebuild()
AuthFactor.model_rebuild()
Device.model_rebuild()
Email.model_rebuild()
File.model_rebuild()
LdapPerson.model_rebuild()
Osint.model_rebuild()
Process.model_rebuild()
ResourceDetails.model_rebuild()

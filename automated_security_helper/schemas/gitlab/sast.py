# generated by datamodel-codegen:
#   filename:  sast-report-format.json
#   timestamp: 2025-05-25T15:34:04+00:00

from __future__ import annotations

from enum import Enum
from typing import Literal, Dict, List, Optional, Union

from pydantic import RootModel, StringConstraints, ConfigDict, BaseModel, Field
from typing_extensions import Annotated


class Level(Enum):
    info = "info"
    warn = "warn"
    fatal = "fatal"


class Message(BaseModel):
    model_config = ConfigDict(use_enum_values=True)

    level: Level = Field(
        ...,
        description="Describes the severity of the communication. Use info to communicate normal scan behaviour; warn to communicate a potentially recoverable problem, or a partial error; fatal to communicate an issue that causes the scan to halt.",
        examples=["info"],
    )
    value: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="The message to communicate.",
        examples=["Permission denied, scanning aborted"],
    )


class Source(Enum):
    argument = "argument"
    file = "file"
    env_variable = "env_variable"
    other = "other"


class Option(BaseModel):
    model_config = ConfigDict(use_enum_values=True)

    name: Annotated[str, StringConstraints(min_length=1, max_length=255)] = Field(
        ...,
        description="The configuration option name.",
        examples=[
            "DAST_FF_ENABLE_BAS",
            "DOCKER_TLS_CERTDIR",
            "DS_MAX_DEPTH",
            "SECURE_LOG_LEVEL",
        ],
    )
    source: Optional[Source] = Field(None, description="The source of this option.")
    value: Optional[Union[bool, int, str]] = Field(
        ...,
        description="The value used for this scan.",
        examples=[True, 2, None, "fatal", ""],
    )


class Vendor(BaseModel):
    name: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="The name of the vendor.", examples=["GitLab"]
    )


class Analyzer(BaseModel):
    id: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="Unique id that identifies the analyzer.",
        examples=["gitlab-dast"],
    )
    name: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="A human readable value that identifies the analyzer, not required to be unique.",
        examples=["GitLab DAST"],
    )
    url: Optional[Annotated[str, StringConstraints(pattern=r"^https?://.+")]] = Field(
        None,
        description="A link to more information about the analyzer.",
        examples=["https://docs.gitlab.com/ee/user/application_security/dast"],
    )
    vendor: Vendor = Field(..., description="The vendor/maintainer of the analyzer.")
    version: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="The version of the analyzer.", examples=["1.0.2"]
    )


class Scanner(BaseModel):
    id: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="Unique id that identifies the scanner.",
        examples=["my-sast-scanner"],
    )
    name: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="A human readable value that identifies the scanner, not required to be unique.",
        examples=["My SAST Scanner"],
    )
    url: Optional[str] = Field(
        None,
        description="A link to more information about the scanner.",
        examples=["https://scanner.url"],
    )
    version: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="The version of the scanner.", examples=["1.0.2"]
    )
    vendor: Vendor = Field(..., description="The vendor/maintainer of the scanner.")


class Status(Enum):
    success = "success"
    failure = "failure"


class Type(Enum):
    sast = "sast"


class PrimaryIdentifier(BaseModel):
    model_config = ConfigDict(use_enum_values=True)

    type: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="for example, cve, cwe, osvdb, usn, or an analyzer-dependent type such as gemnasium).",
    )
    name: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="Human-readable name of the identifier."
    )
    url: Optional[Annotated[str, StringConstraints(pattern=r"^(https?|ftp)://.+")]] = (
        Field(None, description="URL of the identifier's documentation.")
    )
    value: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="Value of the identifier, for matching purpose."
    )


class Event(BaseModel):
    event: str = Field(
        ...,
        description="Name of the event. Events must be defined and added to the security reports observability events allow list.",
    )
    property: Optional[str] = Field(
        None,
        description="Data related to given event. Column in the data warehouse, fast to filter on in queries.",
    )
    label: Optional[str] = Field(
        None,
        description="Data related to given event. Column in the data warehouse, fast to filter on in queries.",
    )
    value: Optional[float] = Field(
        None,
        description="Data related to given event. Column in the data warehouse, fast to filter on in queries.",
    )


class Observability(BaseModel):
    events: Optional[List[Event]] = Field(
        None,
        description="Internal GitLab use only. Array of events containing metrics logged via the GitLab internal event tracking system. Recommend working with the analytics instrumentation team to define events.",
    )


class Scan(BaseModel):
    model_config = ConfigDict(use_enum_values=True)

    messages: Optional[List[Message]] = None
    options: Optional[List[Option]] = None
    analyzer: Analyzer = Field(
        ...,
        description="Object defining the analyzer used to perform the scan. Analyzers typically delegate to an underlying scanner to run the scan.",
    )
    scanner: Scanner = Field(
        ..., description="Object defining the scanner used to perform the scan."
    )
    start_time: Annotated[
        str, StringConstraints(pattern=r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$")
    ] = Field(
        ...,
        description="ISO8601 UTC value with format yyyy-mm-ddThh:mm:ss, representing when the scan started.",
        examples=["2020-02-14T16:01:59"],
    )
    end_time: Annotated[
        str, StringConstraints(pattern=r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$")
    ] = Field(
        ...,
        description="ISO8601 UTC value with format yyyy-mm-ddThh:mm:ss, representing when the scan finished.",
        examples=["2020-01-28T03:26:02"],
    )
    status: Status = Field(..., description="Result of the scan.")
    type: Type = Field(..., description="Type of the scan.")
    primary_identifiers: Optional[List[PrimaryIdentifier]] = Field(
        None,
        description="An unordered array containing an exhaustive list of primary identifiers for which the analyzer may return results",
    )
    observability: Optional[Observability] = Field(
        None,
        description="Internal GitLab use only. Observability data such as metrics collected by the analyzers.",
    )


class Severity(Enum):
    Info = "Info"
    Unknown = "Unknown"
    Low = "Low"
    Medium = "Medium"
    High = "High"
    Critical = "Critical"


class Identifier(BaseModel):
    type: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="for example, cve, cwe, osvdb, usn, or an analyzer-dependent type such as gemnasium).",
    )
    name: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="Human-readable name of the identifier."
    )
    url: Optional[Annotated[str, StringConstraints(pattern=r"^(https?|ftp)://.+")]] = (
        Field(None, description="URL of the identifier's documentation.")
    )
    value: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="Value of the identifier, for matching purpose."
    )


class CvssVectors(BaseModel):
    vendor: Annotated[str, StringConstraints(min_length=1)]
    vector: Annotated[
        str,
        StringConstraints(
            pattern=r"^((AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))/)*(AV:[NAL]|AC:[LMH]|Au:[MSN]|[CIA]:[NPC]|E:(U|POC|F|H|ND)|RL:(OF|TF|W|U|ND)|RC:(UC|UR|C|ND)|CDP:(N|L|LM|MH|H|ND)|TD:(N|L|M|H|ND)|[CIA]R:(L|M|H|ND))$",
            min_length=16,
            max_length=128,
        ),
    ]


class CvssVectors1(BaseModel):
    vendor: Annotated[str, StringConstraints(min_length=1)]
    vector: Annotated[
        str,
        StringConstraints(
            pattern=r"^CVSS:3[.][01]/((AV:[NALP]|AC:[LH]|PR:[NLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]|E:[XUPFH]|RL:[XOTWU]|RC:[XURC]|[CIA]R:[XLMH]|MAV:[XNALP]|MAC:[XLH]|MPR:[XNLH]|MUI:[XNR]|MS:[XUC]|M[CIA]:[XNLH])/)*(AV:[NALP]|AC:[LH]|PR:[NLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]|E:[XUPFH]|RL:[XOTWU]|RC:[XURC]|[CIA]R:[XLMH]|MAV:[XNALP]|MAC:[XLH]|MPR:[XNLH]|MUI:[XNR]|MS:[XUC]|M[CIA]:[XNLH])$",
            min_length=32,
            max_length=128,
        ),
    ]


class Link(BaseModel):
    name: Optional[str] = Field(
        None, description="Name of the vulnerability details link."
    )
    url: Annotated[str, StringConstraints(pattern=r"^(https?|ftp)://.+")] = Field(
        ..., description="URL of the vulnerability details document."
    )


class Signature(BaseModel):
    algorithm: str = Field(
        ..., description="The algorithm used to generate the signature."
    )
    value: str = Field(..., description="The result of this signature algorithm.")


class Item(BaseModel):
    file: Optional[str] = Field(
        None, description="Path to the file where the vulnerability is located."
    )
    start_line: Optional[float] = Field(
        None, description="The first line of the file that includes the vulnerability."
    )
    end_line: Optional[float] = Field(
        None, description="The last line of the file that includes the vulnerability."
    )
    signatures: List[Signature] = Field(
        ...,
        description="An array of calculated tracking signatures for this tracking item.",
        min_length=1,
    )


class Tracking(BaseModel):
    type: Literal["source"] = Field(
        "source",
        description="Each tracking type must declare its own type.",
    )
    items: List[Item]


class Type1(Enum):
    flagged_as_likely_false_positive = "flagged-as-likely-false-positive"


class Flag(BaseModel):
    model_config = ConfigDict(use_enum_values=True)

    type: Type1 = Field(..., description="Result of the scan.")
    origin: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="Tool that issued the flag."
    )
    description: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="What the flag is about."
    )


class Location(BaseModel):
    file: Optional[str] = Field(
        None, description="Path to the file where the vulnerability is located."
    )
    start_line: Optional[float] = Field(
        None, description="The first line of the code affected by the vulnerability."
    )
    end_line: Optional[float] = Field(
        None, description="The last line of the code affected by the vulnerability."
    )
    class_: Optional[str] = Field(
        None,
        alias="class",
        description="Provides the name of the class where the vulnerability is located.",
    )
    method: Optional[str] = Field(
        None,
        description="Provides the name of the method where the vulnerability is located.",
    )


class Fix(BaseModel):
    id: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="Unique identifier of the vulnerability. This is recommended to be a UUID.",
        examples=["642735a5-1425-428d-8d4e-3c854885a3c9"],
    )


class Remediation(BaseModel):
    fixes: List[Fix] = Field(
        ...,
        description="An array of strings that represent references to vulnerabilities fixed by this remediation.",
    )
    summary: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="An overview of how the vulnerabilities were fixed."
    )
    diff: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="A base64-encoded remediation code diff, compatible with git apply.",
    )


class TextValue(RootModel):
    root: str


class NamedField(BaseModel):
    name: TextValue
    description: Optional[TextValue] = None


class Text(BaseModel):
    type: Literal["text"] = "text"
    value: TextValue


class Url(BaseModel):
    type: Literal["url"] = "url"
    text: Optional[TextValue] = None
    href: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., examples=["http://mysite.com"]
    )


class Code(BaseModel):
    type: Literal["code"] = "code"
    value: str
    lang: Optional[str] = Field(None, description="A programming language")


class Value(BaseModel):
    type: Literal["value"] = "value"
    value: Union[float, str, bool]


class Diff(BaseModel):
    type: Literal["diff"] = "diff"
    before: str
    after: str


class Markdown(BaseModel):
    type: Literal["markdown"] = "markdown"
    value: TextValue = Field(
        ...,
        examples=[
            "Here is markdown `inline code` #1 [test](gitlab.com)\n\n![GitLab Logo](https://about.gitlab.com/images/press/logo/preview/gitlab-logo-white-preview.png)"
        ],
    )


class Commit(BaseModel):
    type: Literal["commit"] = "commit"
    value: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., description="The commit SHA"
    )


class FileLocation(BaseModel):
    type: Literal["file-location"] = "file-location"
    file_name: Annotated[str, StringConstraints(min_length=1)]
    line_start: Annotated[int, Field(ge=1)]
    line_end: Optional[Annotated[int, Field(ge=1)]] = None
    column_start: Optional[Annotated[int, Field(ge=1)]] = None
    column_end: Optional[Annotated[int, Field(ge=1)]] = None


class ModuleLocation(BaseModel):
    type: Literal["module-location"] = "module-location"
    module_name: Annotated[str, StringConstraints(min_length=1)] = Field(
        ..., examples=["compiled_binary"]
    )
    offset: int = Field(..., examples=[100])


class NodeType(Enum):
    source = "source"
    sink = "sink"
    propagation = "propagation"


class CodeFlowNode(BaseModel):
    model_config = ConfigDict(use_enum_values=True)

    type: Literal["code-flow-node"] = "code-flow-node"
    file_location: FileLocation
    node_type: NodeType = Field(..., description="Describes a code flow node type")


class Item1(RootModel):
    root: List[CodeFlowNode]


class CodeFlows(BaseModel):
    type: Literal["code-flows"] = "code-flows"
    items: List[Item1] = Field(..., max_length=10, min_length=1)


class Vulnerability(BaseModel):
    model_config = ConfigDict(use_enum_values=True)

    id: Annotated[str, StringConstraints(min_length=1)] = Field(
        ...,
        description="Unique identifier of the vulnerability. This is recommended to be a UUID.",
        examples=["642735a5-1425-428d-8d4e-3c854885a3c9"],
    )
    location: Location = Field(
        ..., description="Identifies the vulnerability's location."
    )
    name: Optional[Annotated[str, StringConstraints(max_length=255)]] = Field(
        None,
        description="The name of the vulnerability. This must not include the finding's specific information.",
    )
    description: Optional[Annotated[str, StringConstraints(max_length=1048576)]] = (
        Field(
            None,
            description="A long text section describing the vulnerability more fully.",
        )
    )
    severity: Optional[Severity] = Field(
        None,
        description="How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.",
    )
    solution: Optional[Annotated[str, StringConstraints(max_length=7000)]] = Field(
        None, description="Explanation of how to fix the vulnerability."
    )
    identifiers: List[Identifier] = Field(
        ...,
        description="An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.",
        min_length=1,
    )
    cvss_vectors: Optional[List[Union[CvssVectors, CvssVectors1]]] = Field(
        None,
        description="An ordered array of CVSS vectors, each issued by a vendor to rate the vulnerability. The first item in the array is used as the primary CVSS vector, and is used to filter and sort the vulnerability.",
        max_length=10,
        min_length=1,
    )
    links: Optional[List[Link]] = Field(
        None,
        description="An array of references to external documentation or articles that describe the vulnerability.",
    )
    details: Optional[dict] = None
    tracking: Optional[Tracking] = Field(
        None,
        description="Describes how this vulnerability should be tracked as the project changes.",
    )
    flags: Optional[List[Flag]] = Field(
        None, description="Flags that can be attached to vulnerabilities."
    )
    raw_source_code_extract: Optional[str] = Field(
        None, description="Provides an unsanitized excerpt of the affected source code."
    )


class GitlabSastReport(BaseModel):
    model_config = ConfigDict(use_enum_values=True, extra="allow")

    scan: Scan
    schema_: str | None = Field(
        None,
        alias="schema",
        description="URI pointing to the validating security report schema.",
        pattern=r"^https?://.+",
    )
    version: Annotated[str, StringConstraints(pattern=r"^[0-9]+\.[0-9]+\.[0-9]+$")] = (
        Field(
            ...,
            description="The version of the schema to which the JSON report conforms.",
        )
    )
    vulnerabilities: List[Vulnerability] = Field(
        ..., description="Array of vulnerability objects."
    )
    remediations: Optional[List[Remediation]] = Field(
        None,
        description="An array of objects containing information on available remediations, along with patch diffs to apply.",
    )


class DetailType(RootModel):
    root: Union[
        NamedList,
        ListModel,
        Table,
        Text,
        Url,
        Code,
        Value,
        Diff,
        Markdown,
        Commit,
        FileLocation,
        ModuleLocation,
        CodeFlows,
    ]


class NamedList(BaseModel):
    type: Literal["named-list"] = "named-list"
    items: Dict[str, Items1]


class ListModel(BaseModel):
    type: Literal["list"] = "list"
    items: List[DetailType]


class Table(BaseModel):
    type: Literal["table"] = "table"
    header: Optional[List[DetailType]] = None
    rows: List[List[DetailType]]


class Items(RootModel):
    root: Dict[str, Items1]


class Items1(NamedField):
    pass


Vulnerability.model_rebuild()
DetailType.model_rebuild()
NamedList.model_rebuild()
Items.model_rebuild()
Items1.model_rebuild()

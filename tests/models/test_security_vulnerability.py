"""Unit tests for security vulnerability model."""

import pytest
from datetime import datetime
from automated_security_helper.models.core import BaseFinding, Location, Scanner
from automated_security_helper.models.security_vulnerability import (
    SecurityVulnerability,
    SecurityVulnerabilityReport,
)
from automated_security_helper.models.data_interchange import ReportMetadata


@pytest.fixture
def sample_scanner():
    """Create a sample scanner for testing."""
    return Scanner(name="security_scanner_1", version="1.0.0", type="SAST")


@pytest.fixture
def sample_location():
    """Create a sample location for testing."""
    return Location(file_path="/app/vulnerable_code.py", start_line=42, end_line=45)


@pytest.fixture
def sample_vulnerability(sample_scanner, sample_location):
    """Create a sample security vulnerability for testing."""
    return SecurityVulnerability(
        id="SEC-001",
        title="Hardcoded Secret",
        description="Found hardcoded API key in source code",
        severity="HIGH",
        scanner=sample_scanner,
        location=sample_location,
        vulnerability_type="secret_exposure",
        cwe_id="CWE-798",
        cvss_score=7.5,
        remediation_steps=["Remove hardcoded secrets", "Use environment variables"],
        references=[
            "https://cwe.mitre.org/data/definitions/798.html",
            "https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password",
        ],
        status="OPEN",
    )


def test_security_vulnerability_creation(sample_scanner, sample_location):
    """Test creation of SecurityVulnerability objects."""
    vuln = SecurityVulnerability(
        id=f"SEC-{round(datetime.now().timestamp())}",
        title="Hardcoded Secret",
        description="Found hardcoded API key in source code",
        severity="HIGH",
        scanner=sample_scanner,
        location=sample_location,
        timestamp=datetime.now().isoformat(timespec="seconds"),
        vulnerability_type="secret_exposure",
        cwe_id="CWE-798",
        cvss_score=7.5,
        remediation_steps=["Remove hardcoded secrets", "Use environment variables"],
        references=[
            "https://cwe.mitre.org/data/definitions/798.html",
            "https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password",
        ],
    )
    assert vuln.title == "Hardcoded Secret"
    assert vuln.severity == "HIGH"
    assert vuln.vulnerability_type == "secret_exposure"
    assert vuln.cwe_id == "CWE-798"
    assert vuln.cvss_score == 7.5
    assert len(vuln.remediation_steps) == 2
    assert len(vuln.references) == 2


def test_security_vulnerability_inheritance(sample_vulnerability):
    """Test that SecurityVulnerability inherits correctly from BaseFinding."""
    # Test inheritance
    assert isinstance(sample_vulnerability, BaseFinding)

    # Test base attributes
    assert sample_vulnerability.id == "SEC-001"
    assert sample_vulnerability.title == "Hardcoded Secret"
    assert sample_vulnerability.severity == "HIGH"
    assert sample_vulnerability.status == "OPEN"
    assert isinstance(sample_vulnerability.timestamp, str)

    # Test extended attributes
    assert sample_vulnerability.vulnerability_type == "secret_exposure"
    assert sample_vulnerability.cwe_id == "CWE-798"
    assert sample_vulnerability.cvss_score == 7.5
    assert len(sample_vulnerability.remediation_steps) == 2
    assert len(sample_vulnerability.references) == 2
    assert hasattr(sample_vulnerability, "severity")
    assert hasattr(sample_vulnerability, "scanner")
    assert hasattr(sample_vulnerability, "location")
    assert hasattr(sample_vulnerability, "timestamp")


def test_security_vulnerability_invalid_cvss_score(sample_scanner, sample_location):
    """Test that invalid CVSS score raises ValidationError."""
    with pytest.raises(ValueError):
        SecurityVulnerability(
            id="TEST-001",
            title="Test Vulnerability",
            description="Test description",
            severity="HIGH",
            scanner=sample_scanner,
            location=sample_location,
            vulnerability_type="test_type",
            cwe_id="CWE-000",
            cvss_score=11.0,  # Invalid CVSS score (should be 0-10)
            remediation_steps=[],
            references=[],
            status="OPEN",
        )


def test_security_vulnerability_invalid_cwe_id(sample_scanner, sample_location):
    """Test that invalid CWE ID format raises ValidationError."""
    with pytest.raises(ValueError):
        SecurityVulnerability(
            title="Test Vulnerability",
            description="Test description",
            severity="HIGH",
            scanner=sample_scanner,
            location=sample_location,
            timestamp=datetime.now().isoformat(timespec="seconds"),
            vulnerability_type="test_type",
            cwe_id="invalid-format",  # Invalid CWE ID format
            cvss_score=5.0,
            remediation_steps=[],
            references=[],
        )


def test_security_vulnerability_report_creation(sample_vulnerability):
    """Test creation of SecurityVulnerabilityReport objects."""
    report = SecurityVulnerabilityReport(
        name="Test Security Report",
        metadata=ReportMetadata(
            report_id="TEST-001",
            project_name="test-project",
            tool_name="security-tool",
            tool_version="1.0.0",
        ),
        findings=[sample_vulnerability],
    )

    assert report.name == "Test Security Report"
    assert len(report.findings) == 1
    assert report.findings[0] == sample_vulnerability
    assert "total_cvss" in report.risk_metrics
    assert report.risk_metrics["avg_cvss"] == 7.5


def test_security_vulnerability_report_empty():
    """Test creation of empty SecurityVulnerabilityReport."""
    report = SecurityVulnerabilityReport(
        name="Empty Report",
        metadata=ReportMetadata(
            report_id="TEST-002",
            project_name="test-project",
            tool_name="security-tool",
            tool_version="1.0.0",
        ),
    )
    assert report.metadata.project_name == "test-project"
    assert len(report.findings) == 0
    assert report.risk_metrics["total_cvss"] == 0.0
    assert report.risk_metrics["avg_cvss"] == 0.0
    assert report.risk_metrics["max_cvss"] == 0.0


def test_security_vulnerability_report_multiple_vulnerabilities(
    sample_vulnerability, sample_scanner, sample_location
):
    """Test SecurityVulnerabilityReport with multiple vulnerabilities."""
    vuln2 = SecurityVulnerability(
        id="SQL-001",
        title="SQL Injection",
        description="SQL injection vulnerability in query",
        severity="MEDIUM",
        scanner=sample_scanner,
        location=sample_location,
        vulnerability_type="injection",
        cwe_id="CWE-89",
        cvss_score=6.5,
        remediation_steps=["Use parameterized queries"],
        references=["https://cwe.mitre.org/data/definitions/89.html"],
        status="OPEN",
    )

    report = SecurityVulnerabilityReport(
        name="Multiple Vulnerabilities Report",
        metadata=ReportMetadata(
            report_id="TEST-003",
            project_name="test-project",
            tool_name="security-tool",
            tool_version="1.0.0",
        ),
        findings=[sample_vulnerability, vuln2],
    )
    assert len(report.findings) == 2
    assert any(v.severity == "HIGH" for v in report.findings)
    assert any(v.severity == "MEDIUM" for v in report.findings)
    assert any(v.cwe_id == "CWE-798" for v in report.findings)
    assert any(v.cwe_id == "CWE-89" for v in report.findings)


def test_security_vulnerability_risk_metrics_calculation(
    sample_scanner, sample_location
):
    """Test risk metrics calculation functionality."""
    vulnerabilities = [
        SecurityVulnerability(
            id=f"TEST-{i}",
            title=f"Test Vulnerability {i}",
            description=f"Test description {i}",
            severity="HIGH" if i < 2 else "MEDIUM" if i < 4 else "LOW",
            scanner=Scanner(name="test", version="1.0"),
            location=Location(file_path="test.py", start_line=i, end_line=i),
            timestamp=datetime.now().isoformat(timespec="seconds"),
            vulnerability_type="test",
            cwe_id=f"CWE-{i}",
            cvss_score=8.0 if i < 2 else 5.0 if i < 4 else 3.0,
            remediation_steps=[],
            references=[],
        )
        for i in range(6)
    ]
    report = SecurityVulnerabilityReport(
        name="Risk Metrics Report",
        metadata=ReportMetadata(
            report_id="RISK-001",
            project_name="test-project",
            tool_name="security-tool",
            tool_version="1.0.0",
        ),
        findings=vulnerabilities,
    )

    report.calculate_risk_metrics()
    assert report.metadata.summary_stats["high"] == 2
    assert report.metadata.summary_stats["medium"] == 2
    assert report.metadata.summary_stats["low"] == 2
    assert 5.0 <= report.risk_metrics["avg_cvss"] <= 5.5  # Average of all CVSS scores

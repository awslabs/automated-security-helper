name: ASH - Scan Validation

on:
  push:
    branches:
      - "!main"
  pull_request:
    branches:
      - "*"
  workflow_dispatch: {}

env:
  PYTHON_VERSION: "3.12"
  COLUMNS: 160

permissions:
  contents: read

jobs:
  validate-scan-methods:
    name: ASH Scan Test${{ matrix.config_file && format(' ({0})', matrix.config_file == 'community' && 'Community Plugins' || matrix.config_file) || '' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux runners (x86) - Default Config
          - os: ubuntu-latest
            method: bash
            platform: linux/amd64
            config_file: default
          - os: ubuntu-latest
            method: powershell
            platform: linux/amd64
            config_file: default
          - os: ubuntu-latest
            method: python-container
            platform: linux/amd64
            config_file: default
          - os: ubuntu-latest
            method: python-local
            platform: linux/amd64
            config_file: default

          # Linux runners (ARM) - Default Config
          - os: ubuntu-24.04-arm
            method: bash
            platform: linux/aarch64
            config_file: default
          - os: ubuntu-24.04-arm
            method: powershell
            platform: linux/aarch64
            config_file: default
          - os: ubuntu-24.04-arm
            method: python-container
            platform: linux/aarch64
            config_file: default
          - os: ubuntu-24.04-arm
            method: python-local
            platform: linux/aarch64
            config_file: default

          # macOS runners - Default Config
          ### Disabled: Docker on the hosted MacOS runners isn't
          ###           very well supported right now
          # - os: macos-latest
          #   method: bash
          #   platform: darwin/amd64
          #   config_file: default
          # - os: macos-latest
          #   method: powershell
          #   platform: darwin/amd64
          #   config_file: default
          # - os: macos-latest
          #   method: python-container
          #   platform: darwin/amd64
          #   config_file: default
          - os: macos-latest
            method: python-local
            platform: darwin/amd64
            config_file: default

          # Windows runners - Default Config
          ### Disabled: Docker on the hosted Windows runners isn't
          ###           very well supported right
          # - os: windows-latest
          #   method: powershell
          #   platform: windows/amd64
          #   config_file: default
          # - os: windows-latest
          #   method: python-container
          #   platform: windows/amd64
          #   config_file: default
          ### Temp disabled to not impact others as this currently hangs
          - os: windows-latest
            method: python-local
            platform: windows/amd64
            config_file: default

          # Community Plugins Validation - Essential platforms only
          - os: ubuntu-latest
            method: python-local
            platform: linux/amd64
            config_file: community
          - os: ubuntu-24.04-arm
            method: python-local
            platform: linux/aarch64
            config_file: community
          - os: macos-latest
            method: python-local
            platform: darwin/amd64
            config_file: community
          - os: windows-latest
            method: python-local
            platform: windows/amd64
            config_file: community

    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Install docker on MacOS
      #   if: runner.os == 'macos' && matrix.method == 'python-local'
      #   run: |
      #     brew install docker
      #     docker info

      # - name: Set up Docker Buildx on MacOS
      #   if: contains(matrix.os, 'macos') && matrix.method != 'python-local'
      #   uses: docker/setup-buildx-action@v3

      # - name: Set up Docker Buildx on Windows
      #   if: contains(matrix.os, 'windows') && matrix.method != 'python-local'
      #   uses: docker/setup-buildx-action@v3
      #   with:
      #     install: true

      - name: Set up Docker Buildx on Linux
        if: contains(matrix.os, 'ubuntu') && matrix.method != 'python-local'
        uses: docker/setup-buildx-action@v3

      - name: Create output directory
        shell: bash
        run: mkdir -p .ash/ash_output

      # Install community plugin tools when using community config
      - name: Install Community Plugin Tools
        if: matrix.config_file == 'community'
        shell: bash
        run: |
          echo "Installing tools needed for community plugins..."

          # Install Trivy based on the operating system
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            echo "Installing Trivy on Linux..."
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            
            # Verify installation
            trivy version
            
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Installing Trivy on macOS..."
            brew install trivy
            
            # Verify installation
            trivy version
            
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "Installing Trivy on Windows..."
            # Download and install Trivy for Windows
            TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep tag_name | cut -d '"' -f 4 | sed 's/v//')
            curl -sfL -o trivy.tar.gz "https://github.com/aquasecurity/trivy/releases/latest/download/trivy_${TRIVY_VERSION}_Windows-64bit.tar.gz"
            tar -xzf trivy.tar.gz
            
            # Create tools directory and move trivy
            mkdir -p /c/tools
            mv trivy.exe /c/tools/
            rm trivy.tar.gz
            
            # Add to PATH and verify
            echo "C:\tools" >> $GITHUB_PATH
            export PATH="/c/tools:$PATH"
            trivy version
            
          else
            echo "Unsupported operating system: $RUNNER_OS"
            exit 1
          fi

          echo "Community plugin tools installation completed successfully!"

      # Call the appropriate workflow based on matrix.method
      ############ Python #########
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        if: contains(matrix.method, 'python')
        with:
          enable-cache: true
      - name: Set up Python
        if: contains(matrix.method, 'python')
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install ASH Python package at commit SHA (shell)
        if: contains(matrix.method, 'python') && !contains(matrix.os, 'windows')
        run: |
          echo "Installing ASH using Python on ${{ matrix.os }} (${{ matrix.platform }})"
          pip install .

      - name: Update GITHUB_PATH with Python scripts path on Windows
        if: contains(matrix.method, 'python') && matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          pip install .
          echo "$env:APPDATA\Python\Scripts" >> $env:GITHUB_PATH

      - name: Validate ASH using Python + Container
        if: matrix.method == 'python-container'
        # We're not worried if the scan failed, we are validating that it produces the outputs expected.
        # It should fail if there are findings in the scan, but that's a valid test for us still.
        shell: bash
        continue-on-error: true
        timeout-minutes: 10
        run: |
          echo "Testing ASH using Python (Container) on ${{ matrix.os }} (${{ matrix.platform }}) with config: ${{ matrix.config_file }}"
          echo "ASH Version:"
          ash --version
          echo "ASH Help:"
          ash --help
          echo "ASH Scan Output:"
          if [ "${{ matrix.config_file }}" = "community" ]; then
            ash --mode container --build-target ci --verbose --no-progress --ignore-suppressions --ash-revision-to-install LOCAL --config .ash/.ash_community_plugins.yaml
          else
            ash --mode container --build-target ci --verbose --no-progress --ignore-suppressions --ash-revision-to-install LOCAL
          fi

      - name: Validate ASH using Python Local (Windows)
        if: matrix.method == 'python-local' && runner.os == 'Windows'
        # We're not worried if the scan failed, we are validating that it produces the outputs expected.
        # It should fail if there are findings in the scan, but that's a valid test for us still.
        continue-on-error: true
        timeout-minutes: 10
        shell: pwsh
        run: |
          Write-Host "Testing ASH using Python (Local) on ${{ matrix.os }} (${{ matrix.platform }}) with config: ${{ matrix.config_file }}"
          Write-Host "ASH Version:"
          ash --version
          Write-Host "ASH Help:"
          ash --help
          Write-Host "ASH Dependencies Install"
          ash dependencies install
          Write-Host "ASH Config Get"
          ash config get
          Write-Host "ASH Scan Output:"
          if ("${{ matrix.config_file }}" -eq "community") {
            ash --mode local --build-target ci --verbose --no-progress --ignore-suppressions --config .ash/.ash_community_plugins.yaml
          } else {
            ash --mode local --build-target ci --verbose --no-progress --ignore-suppressions
          }

      - name: Validate ASH using Python Local (Unix)
        if: matrix.method == 'python-local' && runner.os != 'Windows'
        # We're not worried if the scan failed, we are validating that it produces the outputs expected.
        # It should fail if there are findings in the scan, but that's a valid test for us still.
        continue-on-error: true
        timeout-minutes: 10
        shell: bash
        run: |
          echo "Testing ASH using Python (Local) on ${{ matrix.os }} (${{ matrix.platform }}) with config: ${{ matrix.config_file }}"
          echo "ASH Version:"
          ash --version
          echo "ASH Help:"
          ash --help
          echo "ASH Dependencies Install"
          ash dependencies install
          echo "ASH Config Get"
          ash config get
          echo "ASH Scan Output:"
          if [ "${{ matrix.config_file }}" = "community" ]; then
            ash --mode local --build-target ci --verbose --no-progress --ignore-suppressions --config .ash/.ash_community_plugins.yaml
          else
            ash --mode local --build-target ci --verbose --no-progress --ignore-suppressions
          fi

      ############ PowerShell #########

      - name: Validate ASH using PowerShell
        if: matrix.method == 'powershell'
        shell: pwsh
        # We're not worried if the scan failed, we are validating that it produces the outputs expected.
        # It should fail if there are findings in the scan, but that's a valid test for us still.
        continue-on-error: true
        timeout-minutes: 10
        run: |
          Write-Host "Testing ASH using PowerShell on ${{ matrix.os }} (${{ matrix.platform }}) with config: ${{ matrix.config_file }}"
          . ./utils/ash_helpers.ps1
          Get-Help Invoke-ASH -Full
          if ("${{ matrix.config_file }}" -eq "community") {
            Invoke-ASH -BuildTarget ci -SourceDir "$($PWD.Path)" -OutputDir "$($PWD.Path)/.ash/ash_output" -Verbose -Debug -OCIRunner docker -IgnoreSuppressions -ConfigFile ".ash/.ash_community_plugins.yaml"
          } else {
            Invoke-ASH -BuildTarget ci -SourceDir "$($PWD.Path)" -OutputDir "$($PWD.Path)/.ash/ash_output" -Verbose -Debug -OCIRunner docker -IgnoreSuppressions
          }

      ############ Bash #########

      - name: Validate ASH using Bash
        # We're not worried if the scan failed, we are validating that it produces the outputs expected.
        # It should fail if there are findings in the scan, but that's a valid test for us still.
        continue-on-error: true
        timeout-minutes: 10
        if: matrix.method == 'bash'
        shell: bash
        run: |
          echo "Testing ASH using Bash on ${{ matrix.os }} (${{ matrix.platform }}) with config: ${{ matrix.config_file }}"
          chmod +x ./ash
          echo "ASH Version:"
          ./ash --version
          echo "ASH Help:"
          ./ash --help
          echo "ASH Scan Output:"
          if [ "${{ matrix.config_file }}" = "community" ]; then
            ./ash --build-target ci --verbose --ignore-suppressions --config .ash/.ash_community_plugins.yaml
          else
            ./ash --build-target ci --verbose --ignore-suppressions
          fi

      - name: Verify scan completed
        shell: pwsh
        run: |
          Write-Host "Verifying scan completed successfully on ${{ matrix.os }} using method '${{ matrix.method }}' with config: ${{ matrix.config_file }}"
          $PathsToValidate = @(
            ".ash/ash_output/ash_aggregated_results.json"
            ".ash/ash_output/reports/ash.sarif"
          )
          foreach ($ValPath in $PathsToValidate) {
            if (Test-Path $ValPath) {
              Write-Host "$ValPath found"
            } else {
              Write-Host "$ValPath NOT found"
              exit 1
            }
          }
